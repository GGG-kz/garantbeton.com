// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ—Å–∞–º
const express = require('express');
const cors = require('cors');
const SerialPort = require('serialport');
const Readline = require('@serialport/parser-readline');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ COM-–ø–æ—Ä—Ç–∞ –¥–ª—è –≤–µ—Å–æ–≤
const COM_PORT = 'COM3';
const BAUD_RATE = 9600;
const HTTP_PORT = 8080;

let scalesPort = null;
let currentWeight = null;
let lastWeightUpdate = null;
let isConnected = false;

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º
function connectToScales() {
  try {
    scalesPort = new SerialPort(COM_PORT, {
      baudRate: BAUD_RATE,
      dataBits: 8,
      stopBits: 1,
      parity: 'none'
    });

    const parser = scalesPort.pipe(new Readline({ delimiter: '\r\n' }));

    scalesPort.on('open', () => {
      isConnected = true;
      console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≤–µ—Å–∞–º –Ω–∞ ${COM_PORT}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Å–∞
      requestWeight();
    });

    parser.on('data', (data) => {
      console.log(`üìä –î–∞–Ω–Ω—ã–µ —Å –≤–µ—Å–æ–≤: ${data}`);
      
      // –ü–∞—Ä—Å–∏–º –≤–µ—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö (—Ñ–æ—Ä–º–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –≤–µ—Å–æ–≤)
      const weightMatch = data.match(/(\d+\.?\d*)/);
      if (weightMatch) {
        currentWeight = parseFloat(weightMatch[1]);
        lastWeightUpdate = new Date();
        console.log(`‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å: ${currentWeight} –∫–≥`);
      }
    });

    scalesPort.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Å–æ–≤:', err.message);
      isConnected = false;
    });

    scalesPort.on('close', () => {
      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º –∑–∞–∫—Ä—ã—Ç–æ');
      isConnected = false;
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º:', error.message);
    isConnected = false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Å–∞ —Å –≤–µ—Å–æ–≤
function requestWeight() {
  if (scalesPort && scalesPort.isOpen) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Å–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –≤–µ—Å–æ–≤)
    scalesPort.write('W\r\n'); // –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞
  }
}

// API –º–∞—Ä—à—Ä—É—Ç—ã

// –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
app.get('/status', (req, res) => {
  res.json({
    status: 'ok',
    scales_connected: isConnected,
    port: COM_PORT,
    current_weight: currentWeight,
    last_update: lastWeightUpdate,
    timestamp: new Date().toISOString()
  });
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å
app.get('/weight', (req, res) => {
  if (!isConnected) {
    return res.status(503).json({
      error: '–í–µ—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã',
      scales_connected: false
    });
  }

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ—Å
  requestWeight();
  
  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
  setTimeout(() => {
    res.json({
      value: currentWeight,
      unit: 'kg',
      timestamp: lastWeightUpdate,
      scales_connected: true
    });
  }, 500);
});

// –û–±–Ω—É–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ (—Ç–∞—Ä–∞)
app.post('/tare', (req, res) => {
  if (!isConnected) {
    return res.status(503).json({
      error: '–í–µ—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã',
      scales_connected: false
    });
  }

  if (scalesPort && scalesPort.isOpen) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ–±–Ω—É–ª–µ–Ω–∏—è (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –≤–µ—Å–æ–≤)
    scalesPort.write('T\r\n');
    
    res.json({
      message: '–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      timestamp: new Date().toISOString()
    });
  } else {
    res.status(503).json({
      error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã',
      scales_connected: false
    });
  }
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–∞
app.post('/refresh', (req, res) => {
  if (!isConnected) {
    return res.status(503).json({
      error: '–í–µ—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã',
      scales_connected: false
    });
  }

  requestWeight();
  
  res.json({
    message: '–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
    timestamp: new Date().toISOString()
  });
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
app.get('/info', (req, res) => {
  res.json({
    name: '–°–µ—Ä–≤–µ—Ä –≤–µ—Å–æ–≤',
    version: '1.0.0',
    port: COM_PORT,
    baud_rate: BAUD_RATE,
    scales_connected: isConnected,
    current_weight: currentWeight,
    last_update: lastWeightUpdate,
    timestamp: new Date().toISOString()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: err.message
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(HTTP_PORT, () => {
  console.log(`üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –≤–µ—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${HTTP_PORT}`);
  console.log(`üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${HTTP_PORT}`);
  console.log(`üåê –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: http://${getLocalIP()}:${HTTP_PORT}`);
  console.log(`‚öñÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–µ—Å–∞–º –Ω–∞ ${COM_PORT}...`);
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–µ—Å–∞–º
  connectToScales();
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
function getLocalIP() {
  const interfaces = require('os').networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const interface of interfaces[name]) {
      if (interface.family === 'IPv4' && !interface.internal) {
        return interface.address;
      }
    }
  }
  return 'localhost';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', () => {
  console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  
  if (scalesPort && scalesPort.isOpen) {
    scalesPort.close();
  }
  
  console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(0);
});

console.log('‚öñÔ∏è HTTP —Å–µ—Ä–≤–µ—Ä —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ—Å–∞–º');
console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
console.log('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js');
console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install express cors serialport @serialport/parser-readline');
console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: node scales-http-server.js');
console.log('4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–µ—Å—ã –∫ COM3 –ø–æ—Ä—Ç—É');
console.log('5. –î—Ä—É–≥–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã —Å–º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ HTTP');
console.log('');
console.log('üìö API –º–∞—Ä—à—Ä—É—Ç—ã:');
console.log('GET  /status  - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤–µ—Å–æ–≤');
console.log('GET  /weight  - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å');
console.log('POST /tare    - –æ–±–Ω—É–ª–∏—Ç—å –≤–µ—Å—ã');
console.log('POST /refresh - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å');
console.log('GET  /info    - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ');
