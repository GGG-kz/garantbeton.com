import React, { useState, useEffect } from 'react';
import { WeighingDraft, formatWeight, formatTimestamp, calculateNetWeight } from '../../types/weighing';
import { useLocalStorage } from '../../hooks/useLocalStorage';
import { useAuthStore } from '../../stores/authStore';

interface DriverWeighingProps {
  currentWeight: number | null;
  onWeightChange: (weight: number) => void;
  isConnected: boolean;
  onConnect: () => void;
  onGetWeight: () => void;
  isLoading: boolean;
}

type DriverMode = 'arrival' | 'departure';

const DriverWeighing: React.FC<DriverWeighingProps> = ({
  currentWeight,
  onWeightChange,
  isConnected,
  onConnect,
  onGetWeight,
  isLoading
}) => {
  const { user } = useAuthStore();
  const [mode, setMode] = useState<DriverMode>('arrival');
  const [drafts, setDrafts] = useLocalStorage<WeighingDraft[]>('driverWeighingDrafts', []);
  const [activeDraft, setActiveDraft] = useState<WeighingDraft | null>(null);
  const [vehicleNumber, setVehicleNumber] = useState('');
  const [searchNumber, setSearchNumber] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (error) {
      const timer = setTimeout(() => setError(null), 5000);
      return () => clearTimeout(timer);
    }
  }, [error]);

  useEffect(() => {
    if (success) {
      const timer = setTimeout(() => setSuccess(null), 3000);
      return () => clearTimeout(timer);
    }
  }, [success]);

  // –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ (–≤—ä–µ–∑–¥)
  const createArrivalDraft = () => {
    if (!vehicleNumber.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
      return;
    }

    if (!currentWeight) {
      setError('–ü–æ–ª—É—á–∏—Ç–µ –≤–µ—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏');
      return;
    }

    if (!user) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    const existingDraft = drafts.find(draft => 
      draft.vehicleNumber === vehicleNumber.trim() && draft.status === 'draft'
    );

    if (existingDraft) {
      setError('–î–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å');
      return;
    }

    const newDraft: WeighingDraft = {
      id: `draft_${Date.now()}`,
      vehicleNumber: vehicleNumber.trim().toUpperCase(),
      grossWeight: currentWeight,
      grossTimestamp: new Date().toISOString(),
      status: 'draft',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      operatorId: user.id,
      operatorName: user.fullName || user.login || '–í–æ–¥–∏—Ç–µ–ª—å'
    };

    setDrafts([newDraft, ...drafts]);
    setActiveDraft(newDraft);
    setVehicleNumber('');
    setSuccess('‚úÖ –ó–∞–ø–∏—Å—å –≤—ä–µ–∑–¥–∞ —Å–æ–∑–¥–∞–Ω–∞! –ú–æ–∂–µ—Ç–µ –µ—Ö–∞—Ç—å –Ω–∞ —Ä–∞–∑–≥—Ä—É–∑–∫—É.');
  };

  // –ü–æ–∏—Å–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ (–≤—ã–µ–∑–¥)
  const findDepartureDraft = () => {
    if (!searchNumber.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
      return;
    }

    const foundDraft = drafts.find(draft => 
      draft.vehicleNumber === searchNumber.trim().toUpperCase() && draft.status === 'draft'
    );
    
    if (foundDraft) {
      setActiveDraft(foundDraft);
      setSuccess('‚úÖ –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –≤–∑–≤–µ—à–∏–≤–∞—Ç—å—Å—è –Ω–∞ –≤—ã–µ–∑–¥–µ.');
    } else {
      setError('‚ùå –ó–∞–ø–∏—Å—å –≤—ä–µ–∑–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è.');
    }
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è (–≤—ã–µ–∑–¥)
  const completeDeparture = () => {
    if (!activeDraft) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
      return;
    }

    if (!currentWeight) {
      setError('–ü–æ–ª—É—á–∏—Ç–µ –≤–µ—Å –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º');
      return;
    }

    const netWeight = calculateNetWeight(activeDraft.grossWeight, currentWeight);

    const completedDraft: WeighingDraft = {
      ...activeDraft,
      tareWeight: currentWeight,
      tareTimestamp: new Date().toISOString(),
      netWeight: netWeight,
      status: 'completed',
      updatedAt: new Date().toISOString()
    };

    const updatedDrafts = drafts.map(draft => 
      draft.id === activeDraft.id ? completedDraft : draft
    );

    setDrafts(updatedDrafts);
    setActiveDraft(null);
    setSearchNumber('');
    setSuccess('üéâ –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é.');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è
  const driverStats = {
    totalTrips: drafts.filter(d => d.status === 'completed').length,
    pendingTrips: drafts.filter(d => d.status === 'draft').length,
    totalWeight: drafts.filter(d => d.status === 'completed' && d.netWeight).reduce((sum, d) => sum + (d.netWeight || 0), 0)
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h2 className="text-2xl font-bold text-mono-900 mb-2">
          üöõ –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
        </h2>
        <p className="text-mono-600">
          –ë—ã—Å—Ç—Ä–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –≤—ä–µ–∑–¥–µ –∏ –≤—ã–µ–∑–¥–µ
        </p>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è */}
      <div className="grid grid-cols-3 gap-4">
        <div className="bg-mono-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-mono-600">{driverStats.totalTrips}</div>
          <div className="text-sm text-mono-700">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
        </div>
        <div className="bg-yellow-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-mono-600">{driverStats.pendingTrips}</div>
          <div className="text-sm text-yellow-700">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</div>
        </div>
        <div className="bg-mono-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-black">{driverStats.totalWeight.toFixed(0)}</div>
          <div className="text-sm text-black">–∫–≥ –≤—Å–µ–≥–æ</div>
        </div>
      </div>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
      <div className="flex space-x-1 bg-mono-100 p-1 rounded-lg">
        <button
          onClick={() => setMode('arrival')}
          className={`flex-1 py-3 px-4 rounded-md font-medium transition-colors ${
            mode === 'arrival'
              ? 'bg-white text-black shadow-sm'
              : 'text-mono-600 hover:text-mono-900'
          }`}
        >
          üöõ –í—ä–µ–∑–¥
        </button>
        <button
          onClick={() => setMode('departure')}
          className={`flex-1 py-3 px-4 rounded-md font-medium transition-colors ${
            mode === 'departure'
              ? 'bg-white text-black shadow-sm'
              : 'text-mono-600 hover:text-mono-900'
          }`}
        >
          üöö –í—ã–µ–∑–¥
        </button>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –≤–µ—Å–æ–≤ */}
      <div className="p-4 bg-mono-50 rounded-lg">
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium text-mono-700">–°—Ç–∞—Ç—É—Å –≤–µ—Å–æ–≤:</span>
          <div className="flex items-center space-x-2">
            <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-mono-500' : 'bg-mono-500'}`}></div>
            <span className={`text-sm font-medium ${isConnected ? 'text-mono-700' : 'text-red-700'}`}>
              {isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
            </span>
          </div>
        </div>
        
        {!isConnected && (
          <button
            onClick={onConnect}
            disabled={isLoading}
            className="mt-2 w-full px-4 py-2 bg-black text-white rounded-lg hover:bg-black disabled:bg-mono-400 transition-colors"
          >
            {isLoading ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫ –≤–µ—Å–∞–º'}
          </button>
        )}
      </div>

      {/* –¢–µ–∫—É—â–∏–π –≤–µ—Å */}
      <div className="p-6 bg-mono-50 border border-mono-200 rounded-lg text-center">
        <div className="text-sm text-black mb-2">–¢–µ–∫—É—â–∏–π –≤–µ—Å:</div>
        <div className="text-4xl font-bold text-black">
          {currentWeight ? formatWeight(currentWeight) : '---'}
        </div>
        {isConnected && (
          <button
            onClick={onGetWeight}
            disabled={isLoading}
            className="mt-4 w-full px-6 py-3 bg-black text-white rounded-lg hover:bg-black disabled:bg-mono-400 transition-colors font-medium"
          >
            {isLoading ? '–ü–æ–ª—É—á–µ–Ω–∏–µ...' : '‚öñÔ∏è –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å'}
          </button>
        )}
      </div>

      {/* –†–µ–∂–∏–º –≤—ä–µ–∑–¥–∞ */}
      {mode === 'arrival' && (
        <div className="p-4 bg-mono-50 border border-green-200 rounded-lg">
          <h3 className="text-lg font-semibold text-mono-900 mb-4">
            üöõ –í—ä–µ–∑–¥ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
          </h3>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-mono-700 mb-2">
                –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:
              </label>
              <input
                type="text"
                value={vehicleNumber}
                onChange={(e) => setVehicleNumber(e.target.value.toUpperCase())}
                placeholder="–ê123–ë–í777"
                className="w-full px-4 py-3 border border-mono-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-lg"
                disabled={!!activeDraft}
              />
            </div>

            <button
              onClick={createArrivalDraft}
              disabled={!currentWeight || !vehicleNumber.trim() || !!activeDraft || !isConnected}
              className="w-full px-6 py-4 bg-mono-600 text-white rounded-lg hover:bg-mono-700 disabled:bg-mono-400 transition-colors font-medium text-lg"
            >
              üìù –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—ä–µ–∑–¥
            </button>

            {activeDraft && (
              <div className="p-3 bg-white border border-green-300 rounded-lg">
                <div className="text-center">
                  <div className="text-lg font-bold text-mono-800 mb-2">
                    ‚úÖ –í—ä–µ–∑–¥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!
                  </div>
                  <div className="text-sm text-mono-700">
                    –ù–æ–º–µ—Ä: <span className="font-bold">{activeDraft.vehicleNumber}</span>
                  </div>
                  <div className="text-sm text-mono-700">
                    –í–µ—Å: <span className="font-bold">{formatWeight(activeDraft.grossWeight)}</span>
                  </div>
                  <div className="text-sm text-mono-700">
                    –í—Ä–µ–º—è: <span className="font-bold">{formatTimestamp(activeDraft.grossTimestamp)}</span>
                  </div>
                  <div className="mt-3 text-sm text-mono-600 font-medium">
                    –ú–æ–∂–µ—Ç–µ –µ—Ö–∞—Ç—å –Ω–∞ —Ä–∞–∑–≥—Ä—É–∑–∫—É
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* –†–µ–∂–∏–º –≤—ã–µ–∑–¥–∞ */}
      {mode === 'departure' && (
        <div className="p-4 bg-orange-50 border border-orange-200 rounded-lg">
          <h3 className="text-lg font-semibold text-orange-900 mb-4">
            üöö –í—ã–µ–∑–¥ —Å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
          </h3>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-mono-700 mb-2">
                –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:
              </label>
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={searchNumber}
                  onChange={(e) => setSearchNumber(e.target.value.toUpperCase())}
                  placeholder="–ê123–ë–í777"
                  className="flex-1 px-4 py-3 border border-mono-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 text-lg"
                />
                <button
                  onClick={findDepartureDraft}
                  disabled={!searchNumber.trim()}
                  className="px-6 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 disabled:bg-mono-400 transition-colors font-medium"
                >
                  üîç –ù–∞–π—Ç–∏
                </button>
              </div>
            </div>

            {activeDraft && (
              <div className="p-4 bg-white border border-orange-300 rounded-lg">
                <div className="text-center mb-4">
                  <div className="text-lg font-bold text-orange-800 mb-2">
                    üìã –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="font-medium text-mono-700">–ù–æ–º–µ—Ä:</span>
                      <div className="font-bold text-mono-900">{activeDraft.vehicleNumber}</div>
                    </div>
                    <div>
                      <span className="font-medium text-mono-700">–í—ä–µ–∑–¥:</span>
                      <div className="font-bold text-mono-600">{formatWeight(activeDraft.grossWeight)}</div>
                    </div>
                    <div>
                      <span className="font-medium text-mono-700">–í—Ä–µ–º—è –≤—ä–µ–∑–¥–∞:</span>
                      <div className="text-mono-900">{formatTimestamp(activeDraft.grossTimestamp)}</div>
                    </div>
                    <div>
                      <span className="font-medium text-mono-700">–¢–µ–∫—É—â–∏–π –≤–µ—Å:</span>
                      <div className="font-bold text-black">
                        {currentWeight ? formatWeight(currentWeight) : '---'}
                      </div>
                    </div>
                  </div>

                  {currentWeight && (
                    <div className="mt-4 p-3 bg-mono-50 border border-mono-200 rounded-lg">
                      <div className="text-sm font-medium text-black mb-2">–†–∞—Å—á–µ—Ç:</div>
                      <div className="grid grid-cols-3 gap-4 text-sm">
                        <div>
                          <span className="font-medium text-mono-700">–í—ä–µ–∑–¥:</span>
                          <div className="font-bold text-mono-600">{formatWeight(activeDraft.grossWeight)}</div>
                        </div>
                        <div>
                          <span className="font-medium text-mono-700">–í—ã–µ–∑–¥:</span>
                          <div className="font-bold text-black">{formatWeight(currentWeight)}</div>
                        </div>
                        <div>
                          <span className="font-medium text-mono-700">–ì—Ä—É–∑:</span>
                          <div className="font-bold text-purple-600">
                            {formatWeight(calculateNetWeight(activeDraft.grossWeight, currentWeight))}
                          </div>
                        </div>
                      </div>
                    </div>
                  )}

                  <button
                    onClick={completeDeparture}
                    disabled={!currentWeight || !isConnected}
                    className="mt-4 w-full px-6 py-4 bg-orange-600 text-white rounded-lg hover:bg-orange-700 disabled:bg-mono-400 transition-colors font-medium text-lg"
                  >
                    ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* –ò—Å—Ç–æ—Ä–∏—è –≤–æ–¥–∏—Ç–µ–ª—è */}
      {drafts.length > 0 && (
        <div className="p-4 bg-white border border-mono-200 rounded-lg">
          <h3 className="text-lg font-semibold text-mono-900 mb-4">
            üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–π
          </h3>
          
          <div className="space-y-2 max-h-64 overflow-y-auto">
            {drafts
              .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
              .slice(0, 10)
              .map(draft => (
                <div key={draft.id} className={`p-3 rounded-lg border ${
                  draft.status === 'completed' 
                    ? 'bg-mono-50 border-green-200' 
                    : 'bg-yellow-50 border-yellow-200'
                }`}>
                  <div className="flex items-center justify-between text-sm">
                    <div className="flex items-center space-x-4">
                      <div>
                        <span className="font-medium text-mono-700">–ù–æ–º–µ—Ä:</span>
                        <span className="ml-1 font-bold">{draft.vehicleNumber}</span>
                      </div>
                      <div>
                        <span className="font-medium text-mono-700">–í—ä–µ–∑–¥:</span>
                        <span className="ml-1 font-bold text-mono-600">{formatWeight(draft.grossWeight)}</span>
                      </div>
                      {draft.tareWeight && (
                        <div>
                          <span className="font-medium text-mono-700">–í—ã–µ–∑–¥:</span>
                          <span className="ml-1 font-bold text-black">{formatWeight(draft.tareWeight)}</span>
                        </div>
                      )}
                      {draft.netWeight && (
                        <div>
                          <span className="font-medium text-mono-700">–ì—Ä—É–∑:</span>
                          <span className="ml-1 font-bold text-purple-600">{formatWeight(draft.netWeight)}</span>
                        </div>
                      )}
                    </div>
                    <div className={`px-2 py-1 rounded text-xs font-medium ${
                      draft.status === 'completed' 
                        ? 'bg-mono-100 text-mono-700' 
                        : 'bg-yellow-100 text-yellow-700'
                    }`}>
                      {draft.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                    </div>
                  </div>
                </div>
              ))}
          </div>
        </div>
      )}

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {error && (
        <div className="p-4 bg-mono-50 border border-mono-200 rounded-lg">
          <div className="flex items-center">
            <span className="text-mono-600 font-medium">{error}</span>
          </div>
        </div>
      )}

      {success && (
        <div className="p-4 bg-mono-50 border border-green-200 rounded-lg">
          <div className="flex items-center">
            <span className="text-mono-600 font-medium">{success}</span>
          </div>
        </div>
      )}
    </div>
  );
};

export default DriverWeighing;
