import React, { useState, useEffect } from 'react';
import { WeighingDraft, CompleteWeighingRequest, formatWeight, formatTimestamp, calculateNetWeight } from '../../types/weighing';
import { useLocalStorage } from '../../hooks/useLocalStorage';
import { useAuthStore } from '../../stores/authStore';

interface DepartureWeighingProps {
  currentWeight: number | null;
  onWeightChange: (weight: number) => void;
  isConnected: boolean;
  onConnect: () => void;
  onGetWeight: () => void;
  isLoading: boolean;
}

const DepartureWeighing: React.FC<DepartureWeighingProps> = ({
  currentWeight,
  onWeightChange,
  isConnected,
  onConnect,
  onGetWeight,
  isLoading
}) => {
  const { user } = useAuthStore();
  const [drafts, setDrafts] = useLocalStorage<WeighingDraft[]>('weighingDrafts', []);
  const [selectedDraft, setSelectedDraft] = useState<WeighingDraft | null>(null);
  const [searchNumber, setSearchNumber] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);

  // –ü–æ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
  const [supplier, setSupplier] = useState('');
  const [recipient, setRecipient] = useState('');
  const [cargoType, setCargoType] = useState('');
  const [notes, setNotes] = useState('');

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    if (error) {
      const timer = setTimeout(() => setError(null), 5000);
      return () => clearTimeout(timer);
    }
  }, [error]);

  useEffect(() => {
    if (success) {
      const timer = setTimeout(() => setSuccess(null), 3000);
      return () => clearTimeout(timer);
    }
  }, [success]);

  // –ü–æ–∏—Å–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
  const findDraftByNumber = (number: string) => {
    const foundDraft = drafts.find(draft => 
      draft.vehicleNumber === number.trim().toUpperCase() && draft.status === 'draft'
    );
    
    if (foundDraft) {
      setSelectedDraft(foundDraft);
      setSupplier('');
      setRecipient('');
      setCargoType('');
      setNotes('');
      setSuccess('–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞–π–¥–µ–Ω!');
    } else {
      setError('–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
  const completeWeighing = () => {
    if (!selectedDraft) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
      return;
    }

    if (!currentWeight) {
      setError('–ü–æ–ª—É—á–∏—Ç–µ –≤–µ—Å –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏');
      return;
    }

    if (!user) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    const netWeight = calculateNetWeight(selectedDraft.grossWeight, currentWeight);

    const completedDraft: WeighingDraft = {
      ...selectedDraft,
      tareWeight: currentWeight,
      tareTimestamp: new Date().toISOString(),
      netWeight: netWeight,
      supplier: supplier.trim() || undefined,
      recipient: recipient.trim() || undefined,
      cargoType: cargoType.trim() || undefined,
      notes: notes.trim() || undefined,
      status: 'completed',
      updatedAt: new Date().toISOString()
    };

    const updatedDrafts = drafts.map(draft => 
      draft.id === selectedDraft.id ? completedDraft : draft
    );

    setDrafts(updatedDrafts);
    setSelectedDraft(null);
    setSearchNumber('');
    setSupplier('');
    setRecipient('');
    setCargoType('');
    setNotes('');
    setSuccess('–í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
  const pendingDrafts = drafts.filter(draft => draft.status === 'draft');

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center">
        <h2 className="text-2xl font-bold text-mono-900 mb-2">
          üöö –í—ã–µ–∑–¥ (–¢–∞—Ä–∞)
        </h2>
        <p className="text-mono-600">
          –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω –ø–æ—Å–ª–µ —Ä–∞–∑–≥—Ä—É–∑–∫–∏
        </p>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <div className="p-4 bg-mono-50 rounded-lg">
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium text-mono-700">–°—Ç–∞—Ç—É—Å –≤–µ—Å–æ–≤:</span>
          <div className="flex items-center space-x-2">
            <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-mono-500' : 'bg-mono-500'}`}></div>
            <span className={`text-sm font-medium ${isConnected ? 'text-mono-700' : 'text-red-700'}`}>
              {isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
            </span>
          </div>
        </div>
        
        {!isConnected && (
          <button
            onClick={onConnect}
            disabled={isLoading}
            className="mt-2 px-4 py-2 bg-black text-white rounded-lg hover:bg-black disabled:bg-mono-400 transition-colors"
          >
            {isLoading ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'}
          </button>
        )}
      </div>

      {/* –¢–µ–∫—É—â–∏–π –≤–µ—Å */}
      <div className="p-6 bg-mono-50 border border-mono-200 rounded-lg text-center">
        <div className="text-sm text-black mb-2">–¢–µ–∫—É—â–∏–π –≤–µ—Å (—Ç–∞—Ä–∞):</div>
        <div className="text-4xl font-bold text-black">
          {currentWeight ? formatWeight(currentWeight) : '---'}
        </div>
        {isConnected && (
          <button
            onClick={onGetWeight}
            disabled={isLoading}
            className="mt-4 px-6 py-2 bg-black text-white rounded-lg hover:bg-black disabled:bg-mono-400 transition-colors"
          >
            {isLoading ? '–ü–æ–ª—É—á–µ–Ω–∏–µ...' : '‚öñÔ∏è –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å'}
          </button>
        )}
      </div>

      {/* –ü–æ–∏—Å–∫ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ */}
      <div className="p-4 bg-white border border-mono-200 rounded-lg">
        <h3 className="text-lg font-semibold text-mono-900 mb-4">
          –ù–∞–π—Ç–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ –Ω–æ–º–µ—Ä—É
        </h3>
        
        <div className="flex space-x-3">
          <input
            type="text"
            value={searchNumber}
            onChange={(e) => setSearchNumber(e.target.value.toUpperCase())}
            placeholder="–ê123–ë–í777"
            className="flex-1 px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500"
          />
          <button
            onClick={() => findDraftByNumber(searchNumber)}
            disabled={!searchNumber.trim()}
            className="px-6 py-2 bg-black text-white rounded-lg hover:bg-black disabled:bg-mono-400 transition-colors"
          >
            üîç –ù–∞–π—Ç–∏
          </button>
        </div>
      </div>

      {/* –í—ã–±—Ä–∞–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ */}
      {selectedDraft && (
        <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
          <h3 className="text-lg font-semibold text-yellow-900 mb-4">
            üìã –í—ã–±—Ä–∞–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫
          </h3>
          
          <div className="grid grid-cols-2 gap-4 mb-4">
            <div>
              <span className="font-medium text-mono-700">–ù–æ–º–µ—Ä:</span>
              <div className="text-lg font-bold text-mono-900">{selectedDraft.vehicleNumber}</div>
            </div>
            <div>
              <span className="font-medium text-mono-700">–ë—Ä—É—Ç—Ç–æ:</span>
              <div className="text-lg font-bold text-mono-600">{formatWeight(selectedDraft.grossWeight)}</div>
            </div>
            <div>
              <span className="font-medium text-mono-700">–í—Ä–µ–º—è –≤—ä–µ–∑–¥–∞:</span>
              <div className="text-mono-900">{formatTimestamp(selectedDraft.grossTimestamp)}</div>
            </div>
            <div>
              <span className="font-medium text-mono-700">–û–ø–µ—Ä–∞—Ç–æ—Ä:</span>
              <div className="text-mono-900">{selectedDraft.operatorName}</div>
            </div>
          </div>

          {/* –ü–æ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-mono-700 mb-2">
                  –ü–æ—Å—Ç–∞–≤—â–∏–∫:
                </label>
                <input
                  type="text"
                  value={supplier}
                  onChange={(e) => setSupplier(e.target.value)}
                  placeholder="–û–û–û –ü–æ—Å—Ç–∞–≤—â–∏–∫"
                  className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-mono-700 mb-2">
                  –ü–æ–ª—É—á–∞—Ç–µ–ª—å:
                </label>
                <input
                  type="text"
                  value={recipient}
                  onChange={(e) => setRecipient(e.target.value)}
                  placeholder="–û–û–û –ü–æ–ª—É—á–∞—Ç–µ–ª—å"
                  className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-mono-700 mb-2">
                –¢–∏–ø –≥—Ä—É–∑–∞:
              </label>
              <input
                type="text"
                value={cargoType}
                onChange={(e) => setCargoType(e.target.value)}
                placeholder="–ü–µ—Å–æ–∫, —â–µ–±–µ–Ω—å, –±–µ—Ç–æ–Ω..."
                className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-mono-700 mb-2">
                –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
              </label>
              <textarea
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..."
                rows={3}
                className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500"
              />
            </div>

            {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç */}
            {currentWeight && (
              <div className="p-3 bg-mono-50 border border-mono-200 rounded-lg">
                <div className="text-sm font-medium text-black mb-2">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:</div>
                <div className="grid grid-cols-3 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-mono-700">–ë—Ä—É—Ç—Ç–æ:</span>
                    <div className="font-bold text-mono-600">{formatWeight(selectedDraft.grossWeight)}</div>
                  </div>
                  <div>
                    <span className="font-medium text-mono-700">–¢–∞—Ä–∞:</span>
                    <div className="font-bold text-black">{formatWeight(currentWeight)}</div>
                  </div>
                  <div>
                    <span className="font-medium text-mono-700">–ù–µ—Ç—Ç–æ:</span>
                    <div className="font-bold text-purple-600">{formatWeight(calculateNetWeight(selectedDraft.grossWeight, currentWeight))}</div>
                  </div>
                </div>
              </div>
            )}

            <div className="flex space-x-3">
              <button
                onClick={completeWeighing}
                disabled={!currentWeight || !isConnected}
                className="flex-1 px-6 py-3 bg-mono-600 text-white rounded-lg hover:bg-mono-700 disabled:bg-mono-400 transition-colors font-medium"
              >
                ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
              
              <button
                onClick={() => {
                  setSelectedDraft(null);
                  setSearchNumber('');
                  setSupplier('');
                  setRecipient('');
                  setCargoType('');
                  setNotes('');
                }}
                className="px-6 py-3 bg-mono-600 text-white rounded-lg hover:bg-mono-700 transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ */}
      {pendingDrafts.length > 0 && (
        <div className="p-4 bg-white border border-mono-200 rounded-lg">
          <h3 className="text-lg font-semibold text-mono-900 mb-4">
            üìã –û–∂–∏–¥–∞—é—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ({pendingDrafts.length})
          </h3>
          
          <div className="space-y-3">
            {pendingDrafts.map(draft => (
              <div key={draft.id} className="p-3 bg-mono-50 border border-mono-200 rounded-lg">
                <div className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-4 text-sm">
                      <div>
                        <span className="font-medium text-mono-700">–ù–æ–º–µ—Ä:</span>
                        <span className="ml-2 font-bold text-mono-900">{draft.vehicleNumber}</span>
                      </div>
                      <div>
                        <span className="font-medium text-mono-700">–ë—Ä—É—Ç—Ç–æ:</span>
                        <span className="ml-2 font-bold text-mono-600">{formatWeight(draft.grossWeight)}</span>
                      </div>
                      <div>
                        <span className="font-medium text-mono-700">–í—Ä–µ–º—è –≤—ä–µ–∑–¥–∞:</span>
                        <span className="ml-2 text-mono-900">{formatTimestamp(draft.grossTimestamp)}</span>
                      </div>
                    </div>
                  </div>
                  
                  <button
                    onClick={() => {
                      setSearchNumber(draft.vehicleNumber);
                      findDraftByNumber(draft.vehicleNumber);
                    }}
                    className="px-3 py-1 bg-black text-white text-sm rounded hover:bg-black transition-colors"
                  >
                    –í—ã–±—Ä–∞—Ç—å
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
      {error && (
        <div className="p-4 bg-mono-50 border border-mono-200 rounded-lg">
          <div className="flex items-center">
            <span className="text-mono-600">‚ùå {error}</span>
          </div>
        </div>
      )}

      {success && (
        <div className="p-4 bg-mono-50 border border-green-200 rounded-lg">
          <div className="flex items-center">
            <span className="text-mono-600">‚úÖ {success}</span>
          </div>
        </div>
      )}
    </div>
  );
};

export default DepartureWeighing;
