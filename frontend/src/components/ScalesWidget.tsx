import React, { useState, useEffect } from 'react';
import { Weight, Plug, PlugZap, AlertCircle, CheckCircle } from 'lucide-react';

interface ScalesWidgetProps {
  onWeightChange?: (weight: number) => void;
  className?: string;
  warehouseId?: string;
  warehouseName?: string;
  comPort?: string;
  showAdvanced?: boolean;
  autoConnect?: boolean; // –ù–æ–≤—ã–π –ø—Ä–æ–ø—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
}

const ScalesWidget: React.FC<ScalesWidgetProps> = ({ 
  onWeightChange, 
  className = '', 
  warehouseId,
  warehouseName,
  comPort,
  showAdvanced = false,
  autoConnect = false 
}) => {
  const [isConnected, setIsConnected] = useState(false);
  const [weight, setWeight] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–∞—à–∏—Ö –≤–µ—Å–æ–≤
  const defaultSettings = {
    port: comPort || 'COM3',
    baudRate: 9600,
    dataBits: 8,
    stopBits: 1,
    parity: 'none' as const
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Serial API
  const isSerialSupported = () => {
    return 'serial' in navigator;
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º
  const connectToScales = async () => {
    if (!isSerialSupported()) {
      setError('Web Serial API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      return;
    }

    try {
      setIsLoading(true);
      setError(null);

      // –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Ä—Ç—É
      const port = await (navigator as any).serial.requestPort({
        filters: [{ usbVendorId: 0x1a86 }] // ID –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ USB-to-Serial –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
      });

      // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      await port.open({
        baudRate: defaultSettings.baudRate,
        dataBits: defaultSettings.dataBits,
        stopBits: defaultSettings.stopBits,
        parity: defaultSettings.parity
      });

      setIsConnected(true);
      
      // –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      startReading(port);

    } catch (err) {
      setError(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setIsConnected(false);
    } finally {
      setIsLoading(false);
    }
  };

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≤–µ—Å–æ–≤
  const disconnectFromScales = async () => {
    try {
      setIsConnected(false);
      setWeight(null);
      setError(null);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', err);
    }
  };

  // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ—Å–æ–≤
  const startReading = async (port: any) => {
    const reader = port.readable.getReader();
    
    try {
      while (isConnected) {
        const { value, done } = await reader.read();
        
        if (done) break;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
        const data = new TextDecoder().decode(value);
        
        // –ü–∞—Ä—Å–∏–º –≤–µ—Å (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "WEIGHT: 123.45 kg")
        const weightMatch = data.match(/(\d+\.?\d*)/);
        if (weightMatch) {
          const newWeight = parseFloat(weightMatch[1]);
          setWeight(newWeight);
          onWeightChange?.(newWeight);
        }
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ—Å–æ–≤');
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:', err);
    } finally {
      reader.releaseLock();
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
  const getWeight = async () => {
    if (!isConnected) {
      setError('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –≤–µ—Å–∞–º');
      return;
    }

    try {
      setIsLoading(true);
      setError(null);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Å–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –≤–µ—Å–æ–≤)
      // –û–±—ã—á–Ω–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ "W" –∏–ª–∏ "P"
      
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞');
    } finally {
      setIsLoading(false);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–µ—Å–ª–∏ –ø–æ—Ä—Ç —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω)
  useEffect(() => {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  }, []);

  return (
    <div className={`p-4 bg-white border border-mono-200 rounded-lg shadow-sm ${className}`}>
      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="mb-2 p-2 bg-mono-50 border border-mono-200 rounded text-xs text-mono-600">
        üîß –û–¢–õ–ê–î–ö–ê: ScalesWidget –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!
      </div>
      
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <Weight className="h-5 w-5 text-mono-600" />
          <div>
            <h3 className="font-medium text-black">
              ‚öñÔ∏è –í–µ—Å—ã {warehouseName ? `(${warehouseName})` : ''}
            </h3>
            {comPort && (
              <p className="text-xs text-mono-500">
                –ü–æ—Ä—Ç: {comPort} ‚Ä¢ 9600 bps, 8N1
              </p>
            )}
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          {isConnected ? (
            <div className="flex items-center space-x-1 text-mono-800">
              <CheckCircle className="h-4 w-4" />
              <span className="text-sm">–ü–æ–¥–∫–ª—é—á–µ–Ω–æ</span>
            </div>
          ) : (
            <div className="flex items-center space-x-1 text-mono-600">
              <AlertCircle className="h-4 w-4" />
              <span className="text-sm">–û—Ç–∫–ª—é—á–µ–Ω–æ</span>
            </div>
          )}
        </div>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <div className="mb-4 p-3 bg-mono-50 rounded-lg">
        <div className="text-sm text-mono-600 mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</div>
        <div className="grid grid-cols-2 gap-2 text-xs text-mono-500">
          <div>–ü–æ—Ä—Ç: {defaultSettings.port}</div>
          <div>–°–∫–æ—Ä–æ—Å—Ç—å: {defaultSettings.baudRate} bps</div>
          <div>–î–∞–Ω–Ω—ã–µ: {defaultSettings.dataBits}N{defaultSettings.stopBits}</div>
          <div>–ß–µ—Ç–Ω–æ—Å—Ç—å: {defaultSettings.parity}</div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex space-x-2 mb-4">
        {!isConnected ? (
          <button
            onClick={connectToScales}
            disabled={isLoading || !isSerialSupported()}
            className="flex items-center space-x-2 px-3 py-2 bg-black text-white rounded-lg hover:bg-mono-800 disabled:bg-mono-400 disabled:cursor-not-allowed text-sm"
          >
            <Plug className="h-4 w-4" />
            <span>{isLoading ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'}</span>
          </button>
        ) : (
          <button
            onClick={disconnectFromScales}
            className="flex items-center space-x-2 px-3 py-2 bg-mono-800 text-white rounded-lg hover:bg-black text-sm"
          >
            <PlugZap className="h-4 w-4" />
            <span>–û—Ç–∫–ª—é—á–∏—Ç—å</span>
          </button>
        )}
        
        {isConnected && (
          <button
            onClick={getWeight}
            disabled={isLoading}
            className="flex items-center space-x-2 px-3 py-2 bg-mono-700 text-white rounded-lg hover:bg-mono-800 disabled:bg-mono-400 text-sm"
          >
            <Weight className="h-4 w-4" />
            <span>{isLoading ? '–í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ...' : '–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å'}</span>
          </button>
        )}
      </div>

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—Å–∞ */}
      {weight !== null && (
        <div className="p-3 bg-mono-100 border border-mono-200 rounded-lg">
          <div className="text-sm text-mono-600 mb-1">–¢–µ–∫—É—â–∏–π –≤–µ—Å:</div>
          <div className="text-2xl font-bold text-black">{weight.toFixed(2)} –∫–≥</div>
        </div>
      )}

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ */}
      {error && (
        <div className="p-3 bg-mono-100 border border-mono-300 rounded-lg">
          <div className="flex items-center space-x-2 text-mono-800">
            <AlertCircle className="h-4 w-4" />
            <span className="text-sm">{error}</span>
          </div>
        </div>
      )}

      {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞ */}
      {!isSerialSupported() && (
        <div className="p-3 bg-mono-100 border border-mono-300 rounded-lg">
          <div className="flex items-center space-x-2 text-mono-700">
            <AlertCircle className="h-4 w-4" />
            <span className="text-sm">
              Web Serial API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome/Edge –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å COM-–ø–æ—Ä—Ç–∞–º–∏.
            </span>
          </div>
        </div>
      )}
    </div>
  );
};

export default ScalesWidget;
