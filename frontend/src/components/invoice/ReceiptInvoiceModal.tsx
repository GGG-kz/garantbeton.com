import React, { useState } from 'react'
import { ReceiptInvoice, CreateReceiptInvoiceRequest, ReceiptInvoiceItem } from '../../types/receiptInvoice'
import { useLocalStorage } from '../../hooks/useLocalStorage'
import { useAuthStore } from '../../stores/authStore'
import { Truck, Weight, Plus, Trash2, Package, Building2, User } from 'lucide-react'
import Modal from '../Modal'
import ScalesWidget from '../ScalesWidget'

interface ReceiptInvoiceModalProps {
  isOpen: boolean
  onClose: () => void
  onSave: (data: CreateReceiptInvoiceRequest) => void
  invoice?: ReceiptInvoice | null
  title: string
}

export default function ReceiptInvoiceModal({ 
  isOpen, 
  onClose, 
  onSave, 
  invoice, 
  title 
}: ReceiptInvoiceModalProps) {
  const { user } = useAuthStore()
  
  // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏–∑ localStorage
  const [drivers] = useLocalStorage<any[]>('drivers', [])
  const [vehiclesFromStorage] = useLocalStorage<any[]>('vehicles', [])
  
  // –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
  const mockVehicles = [
    {
      id: 'vehicle-1',
      type: 'concrete_mixer',
      model: '–ö–∞–º–∞–∑-53215',
      licensePlate: '01ABC123',
      capacity: 6,
      isHired: false,
      status: 'available',
      isActive: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    {
      id: 'vehicle-2',
      type: 'dump_truck',
      model: '–ú–ê–ó-6312',
      licensePlate: '02DEF456',
      capacity: 8,
      isHired: false,
      status: 'available',
      isActive: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    {
      id: 'vehicle-3',
      type: 'concrete_mixer',
      model: '–ó–ò–õ-130',
      licensePlate: '03GHI789',
      capacity: 5,
      isHired: true,
      status: 'available',
      isActive: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
  ]
  
  const [vehicles] = useLocalStorage<any[]>('vehicles', mockVehicles)
  
  const mockCounterparties: any[] = []
  
  const [counterparties] = useLocalStorage<any[]>('counterparties', mockCounterparties)
  
  const mockMaterials: any[] = []
  
  const [materials] = useLocalStorage<any[]>('materials', mockMaterials)
  const [warehouses] = useLocalStorage<any[]>('warehouses', [])
  
  const mockWarehouses: any[] = []
  
  const [allWarehouses] = useLocalStorage<any[]>('warehouses', mockWarehouses)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    invoiceNumber: '',
    invoiceDate: new Date().toISOString().split('T')[0],
    warehouse: '',
    seal: '',
    receivedBy: user?.login || user?.fullName || '',
    items: [] as ReceiptInvoiceItem[]
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Å–æ–≤
  const [selectedWarehouseId, setSelectedWarehouseId] = useState<string>('warehouse-1')
  const [currentWeight, setCurrentWeight] = useState<number | null>(null)
  const [selectedItemIndex, setSelectedItemIndex] = useState<number | null>(null)

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
  const selectedWarehouse = allWarehouses.find(w => w.id === selectedWarehouseId)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  React.useEffect(() => {
    if (isOpen) {
      if (invoice) {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        const processedItems = invoice.items.map(item => {
          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ù–ï–¢–¢–û –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –ë–†–£–¢–¢–û –∏ –¢–ê–†–ê
          if (item.bruttoWeight && item.taraWeight) {
            const netWeight = item.bruttoWeight - item.taraWeight
            let finalWeight = netWeight
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Å —Å —É—á–µ—Ç–æ–º –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
            if (item.humidity && item.humidity > 0) {
              finalWeight = netWeight - (netWeight * item.humidity / 100)
            }
            
            console.log(`üîÑ –ü–ï–†–ï–°–ß–ï–¢ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: –ë–†–£–¢–¢–û=${item.bruttoWeight}, –¢–ê–†–ê=${item.taraWeight}, –ù–ï–¢–¢–û=${netWeight}, –í–ª–∞–∂–Ω–æ—Å—Ç—å=${item.humidity}%, –ò—Ç–æ–≥–æ–≤—ã–π=${finalWeight}`)
            
            return {
              ...item,
              netWeight,
              finalWeight,
              weighingStatus: 'tara_done' as const
            }
          }
          
          return item
        })
        
        setFormData({
          invoiceNumber: invoice.invoiceNumber,
          invoiceDate: invoice.invoiceDate,
          warehouse: invoice.warehouse,
          seal: invoice.seal || '',
          receivedBy: invoice.receivedBy,
          items: processedItems
        })
        setSelectedWarehouseId(invoice.warehouse)
      } else {
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        setFormData({
          invoiceNumber: generateInvoiceNumber(),
          invoiceDate: new Date().toISOString().split('T')[0],
          warehouse: '',
          seal: '',
          receivedBy: user?.login || user?.fullName || '',
          items: []
        })
        setSelectedWarehouseId('warehouse-1')
      }
      setCurrentWeight(null)
      setSelectedItemIndex(null)
    }
  }, [isOpen, invoice, user])

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
  const generateInvoiceNumber = () => {
    const today = new Date()
    const dateStr = today.toISOString().slice(0, 10).replace(/-/g, '')
    const randomNum = Math.floor(Math.random() * 1000).toString().padStart(3, '0')
    return `–ü–ù-${dateStr}-${randomNum}`
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –º–∞—à–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è
  const getDriverVehicleNumber = (): string => {
    if (user?.role !== 'driver') return ''
    
    // –ù–∞–π–¥–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
    const driver = drivers.find(d => d.login === user.login)
    if (!driver || !driver.vehicleIds?.length) return ''
    
    // –ù–∞–π–¥–µ–º –ø–µ—Ä–≤—É—é –º–∞—à–∏–Ω—É –≤–æ–¥–∏—Ç–µ–ª—è
    const vehicle = vehiclesFromStorage.find(v => driver.vehicleIds.includes(v.id))
    return vehicle?.licensePlate || ''
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
  const addItem = () => {
    const driverVehicleNumber = getDriverVehicleNumber()
    
    const newItem: ReceiptInvoiceItem = {
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      vehicleNumber: driverVehicleNumber, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è
      supplier: '',
      buyer: '',
      material: '',
      weighingStatus: 'pending'
    }
    
    setFormData(prev => ({
      ...prev,
      items: [...prev.items, newItem]
    }))
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
  const updateItem = (index: number, field: keyof ReceiptInvoiceItem, value: any) => {
    console.log(`üîç –û–¢–õ–ê–î–ö–ê updateItem: index=${index}, field=${field}, value=${value}`)
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è supplier –∏ material
    if (field === 'supplier') {
      const supplier = counterparties.find(cp => cp.id === value)
      console.log(`üîç –û–¢–õ–ê–î–ö–ê: –í—ã–±—Ä–∞–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫ ID="${value}", –Ω–∞–∑–≤–∞–Ω–∏–µ="${supplier?.name || '–ù–ï –ù–ê–ô–î–ï–ù'}"`)
    }
    if (field === 'material') {
      const material = materials.find(m => m.id === value)
      console.log(`üîç –û–¢–õ–ê–î–ö–ê: –í—ã–±—Ä–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª ID="${value}", –Ω–∞–∑–≤–∞–Ω–∏–µ="${material?.name || '–ù–ï –ù–ê–ô–î–ï–ù'}"`)
    }
    
    const updatedItems = [...formData.items]
    updatedItems[index] = { ...updatedItems[index], [field]: value }
    
    console.log(`üîç –û–¢–õ–ê–î–ö–ê: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç:`, updatedItems[index])
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –Ω–µ—Ç—Ç–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–µ—Å–æ–≤
    if (field === 'bruttoWeight' || field === 'taraWeight') {
      const item = updatedItems[index]
      if (item.bruttoWeight && item.taraWeight) {
        item.netWeight = item.bruttoWeight - item.taraWeight
        item.weighingStatus = 'tara_done'
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –≤–µ—Å —Å —É—á–µ—Ç–æ–º –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
        if (item.humidity) {
          item.finalWeight = item.netWeight - (item.netWeight * item.humidity / 100)
        } else {
          item.finalWeight = item.netWeight
        }
      } else if (item.bruttoWeight) {
        item.weighingStatus = 'brutto_done'
      }
    }
    
    // –ü–µ—Ä–µ—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–µ—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    if (field === 'humidity' && updatedItems[index].netWeight) {
      const item = updatedItems[index]
      item.finalWeight = item.netWeight! - (item.netWeight! * value / 100)
    }
    
    setFormData(prev => {
      const newFormData = { ...prev, items: updatedItems }
      console.log(`üîç –û–¢–õ–ê–î–ö–ê: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ formData:`, newFormData)
      return newFormData
    })
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    setTimeout(() => {
      console.log(`üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ formData —á–µ—Ä–µ–∑ 100–º—Å:`, formData)
    }, 100)
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
  const removeItem = (index: number) => {
    const updatedItems = formData.items.filter((_, i) => i !== index)
    setFormData(prev => ({ ...prev, items: updatedItems }))
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ –ë–†–£–¢–¢–û —Å —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤
  const handleGetBruttoWeight = async (itemIndex: number) => {
    if (!selectedWarehouse?.scalesEnabled) {
      alert('–í–µ—Å—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞')
      return
    }
    
    try {
      console.log(`‚öñÔ∏è –ó–∞–ø—Ä–æ—Å –≤–µ—Å–∞ –ë–†–£–¢–¢–û —Å –≤–µ—Å–æ–≤ ${selectedWarehouse?.scalesModel}`)
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ —Å –≤–µ—Å–æ–≤
      alert('–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞ –ë–†–£–¢–¢–û –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –≤–µ—Å–∞–º')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞ –ë–†–£–¢–¢–û:', error)
      alert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞ —Å –≤–µ—Å–æ–≤')
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ –¢–ê–†–ê —Å —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤
  const handleGetTaraWeight = async (itemIndex: number) => {
    if (!selectedWarehouse?.scalesEnabled) {
      alert('–í–µ—Å—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞')
      return
    }
    
    try {
      console.log(`‚öñÔ∏è –ó–∞–ø—Ä–æ—Å –≤–µ—Å–∞ –¢–ê–†–ê —Å –≤–µ—Å–æ–≤ ${selectedWarehouse?.scalesModel}`)
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ —Å –≤–µ—Å–æ–≤
      alert('–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞ –¢–ê–†–ê –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –≤–µ—Å–∞–º')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞ –¢–ê–†–ê:', error)
      alert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞ —Å –≤–µ—Å–æ–≤')
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤
  const handleWeightRequest = async () => {
    if (!selectedWarehouse?.scalesEnabled) {
      alert('–í–µ—Å—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–∫–ª–∞–¥–∞')
      return
    }
    
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º —á–µ—Ä–µ–∑ COM-–ø–æ—Ä—Ç
      console.log(`‚öñÔ∏è –ó–∞–ø—Ä–æ—Å –≤–µ—Å–∞ —Å –≤–µ—Å–æ–≤ ${selectedWarehouse?.scalesModel} (${selectedWarehouse?.scalesComPort})`)
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ—Å–∞–º
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞:', error)
      alert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞ —Å –≤–µ—Å–æ–≤')
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.invoiceNumber.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π')
      return
    }
    
    if (formData.items.length === 0) {
      alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–π
    for (let i = 0; i < formData.items.length; i++) {
      const item = formData.items[i]
      if (!item.vehicleNumber || !item.supplier || !item.buyer || !item.material) {
        alert(`–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤ –ø–æ–∑–∏—Ü–∏–∏ ${i + 1}`)
        return
      }
    }
    
    const invoiceData: CreateReceiptInvoiceRequest = {
      invoiceNumber: formData.invoiceNumber,
      invoiceDate: formData.invoiceDate,
      warehouse: formData.warehouse,
      seal: formData.seal,
      items: formData.items.map(item => ({
        vehicleNumber: item.vehicleNumber,
        supplier: item.supplier,
        buyer: item.buyer,
        material: item.material,
        bruttoWeight: item.bruttoWeight,
        bruttoDateTime: item.bruttoDateTime,
        taraWeight: item.taraWeight,
        taraDateTime: item.taraDateTime,
        netWeight: item.netWeight,
        humidity: item.humidity,
        finalWeight: item.finalWeight,
        weighingStatus: item.weighingStatus
      })),
      receivedBy: formData.receivedBy,
      issuedBy: formData.receivedBy // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    
    onSave(invoiceData)
    onClose()
  }

  const formatWeight = (weight?: number) => {
    return weight ? `${weight.toFixed(1)} –∫–≥` : '‚Äî'
  }

  const formatDateTime = (dateTime?: string) => {
    return dateTime ? new Date(dateTime).toLocaleString('ru-RU') : '‚Äî'
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'bg-mono-100 text-mono-800'
      case 'brutto_done': return 'bg-mono-100 text-black'
      case 'tara_done': return 'bg-mono-100 text-black'
      case 'completed': return 'bg-mono-100 text-black'
      default: return 'bg-mono-100 text-mono-800'
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç'
      case 'brutto_done': return '–ë—Ä—É—Ç—Ç–æ –≥–æ—Ç–æ–≤–æ'
      case 'tara_done': return '–ì–æ—Ç–æ–≤–æ'
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }
  }

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="üìã –ü—Ä–∏—Ö–æ–¥–Ω–∞—è –Ω–∞–∫–ª–∞–¥–Ω–∞—è" size="xl">
      <div className="space-y-6">
        {/* –í–µ—Å—ã - –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ */}
        {selectedWarehouse && selectedWarehouse.scalesEnabled && (
          <div className="bg-white border border-mono-200 rounded-lg p-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-mono-900">‚öñÔ∏è –í–µ—Å—ã ({selectedWarehouse.name})</h3>
              
              {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º */}
              <button
                type="button"
                onClick={handleWeightRequest}
                className="px-3 py-1 bg-mono-600 text-white text-sm rounded-lg hover:bg-mono-700 flex items-center space-x-1"
                title="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–µ—Å–∞–º"
              >
                <Weight className="h-4 w-4" />
                <span>–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å</span>
              </button>
            </div>
            
            {/* –¢–µ–∫—É—â–∏–π –≤–µ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            {currentWeight && (
              <div className="mb-4 p-3 bg-mono-50 border border-mono-200 rounded-lg">
                <p className="text-sm font-medium text-black">–¢–µ–∫—É—â–∏–π –≤–µ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</p>
                <p className="text-xl font-bold text-black">{currentWeight.toFixed(1)} –∫–≥</p>
              </div>
            )}
            
            <ScalesWidget
              onWeightChange={setCurrentWeight}
              className="border border-mono-200"
              warehouseId={selectedWarehouse?.id}
              warehouseName={selectedWarehouse?.name}
              comPort={selectedWarehouse?.scalesComPort}
              showAdvanced={false}
              autoConnect={false}
            />
          </div>
        )}

        {/* –§–æ—Ä–º–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π */}
        <form onSubmit={handleSubmit} className="space-y-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label htmlFor="invoiceNumber" className="block text-sm font-medium text-mono-700 mb-2">
              –ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π *
            </label>
            <input
              type="text"
              id="invoiceNumber"
              value={formData.invoiceNumber}
              onChange={(e) => setFormData(prev => ({ ...prev, invoiceNumber: e.target.value }))}
              className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500"
              placeholder="–ü–ù-YYYYMMDD-XXX"
            />
          </div>
          
          <div>
            <label htmlFor="invoiceDate" className="block text-sm font-medium text-mono-700 mb-2">
              –î–∞—Ç–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π *
            </label>
            <input
              type="date"
              id="invoiceDate"
              value={formData.invoiceDate}
              onChange={(e) => setFormData(prev => ({ ...prev, invoiceDate: e.target.value }))}
              className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500"
            />
          </div>
          
          <div>
            <label htmlFor="warehouse" className="block text-sm font-medium text-mono-700 mb-2">
              –°–∫–ª–∞–¥ *
            </label>
            <select
              id="warehouse"
              value={formData.warehouse}
              onChange={(e) => {
                setFormData(prev => ({ ...prev, warehouse: e.target.value }))
                setSelectedWarehouseId(e.target.value)
              }}
              className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500"
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥</option>
              {allWarehouses.map((warehouse) => (
                <option key={warehouse.id} value={warehouse.id}>
                  {warehouse.name}
                </option>
              ))}
            </select>
          </div>
          
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ */}
        <div className="flex justify-between items-center">
          <h3 className="text-lg font-medium text-mono-900">–ü–æ–∑–∏—Ü–∏–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π</h3>
          <button
            type="button"
            onClick={addItem}
            className="flex items-center space-x-2 px-4 py-2 bg-black text-white rounded-lg hover:bg-black"
          >
            <Plus className="h-4 w-4" />
            <span>–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é</span>
          </button>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π */}
        <div className="space-y-4">
          {formData.items.map((item, index) => (
            <div key={item.id} className="bg-mono-50 border border-mono-200 rounded-lg p-4">
              <div className="flex items-center justify-between mb-4">
                <h4 className="font-medium text-mono-900">–ü–æ–∑–∏—Ü–∏—è {index + 1}</h4>
                <div className="flex items-center space-x-2">
                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(item.weighingStatus)}`}>
                    {getStatusText(item.weighingStatus)}
                  </span>
                  <button
                    type="button"
                    onClick={() => removeItem(index)}
                    className="text-mono-600 hover:text-black"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {/* –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã */}
                <div>
                  <label className="block text-sm font-medium text-mono-700 mb-1">
                    –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã *
                  </label>
                  <input
                    type="text"
                    value={item.vehicleNumber}
                    onChange={(e) => updateItem(index, 'vehicleNumber', e.target.value.toUpperCase())}
                    className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500 text-sm"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01ABC123)"
                    list={`vehicle-list-${index}`}
                  />
                  <datalist id={`vehicle-list-${index}`}>
                    {vehicles.map((vehicle) => (
                      <option key={vehicle.id} value={vehicle.licensePlate}>
                        {vehicle.licensePlate} ({vehicle.model})
                      </option>
                    ))}
                  </datalist>
                </div>

                {/* –ü–æ—Å—Ç–∞–≤—â–∏–∫ */}
                <div>
                  <label className="block text-sm font-medium text-mono-700 mb-1">
                    –ü–æ—Å—Ç–∞–≤—â–∏–∫ *
                  </label>
                  <select
                    value={item.supplier}
                    onChange={(e) => updateItem(index, 'supplier', e.target.value)}
                    className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500 text-sm"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</option>
                    {counterparties.filter(cp => cp.type === 'supplier').map((counterparty) => (
                      <option key={counterparty.id} value={counterparty.id}>
                        {counterparty.name}
                      </option>
                    ))}
                  </select>
                </div>

                {/* –ü–æ–∫—É–ø–∞—Ç–µ–ª—å */}
                <div>
                  <label className="block text-sm font-medium text-mono-700 mb-1">
                    –ü–æ–∫—É–ø–∞—Ç–µ–ª—å *
                  </label>
                  <select
                    value={item.buyer}
                    onChange={(e) => updateItem(index, 'buyer', e.target.value)}
                    className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500 text-sm"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è</option>
                    {counterparties.filter(cp => cp.type === 'client').map((counterparty) => (
                      <option key={counterparty.id} value={counterparty.id}>
                        {counterparty.name}
                      </option>
                    ))}
                  </select>
                </div>

                {/* –ú–∞—Ç–µ—Ä–∏–∞–ª */}
                <div>
                  <label className="block text-sm font-medium text-mono-700 mb-1">
                    –ú–∞—Ç–µ—Ä–∏–∞–ª *
                  </label>
                  <select
                    value={item.material}
                    onChange={(e) => updateItem(index, 'material', e.target.value)}
                    className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500 text-sm"
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª</option>
                    {materials.map((material) => (
                      <option key={material.id} value={material.id}>
                        {material.name} ({material.unit})
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              {/* –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ */}
              <div className="mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                {/* –ë–†–£–¢–¢–û */}
                <div>
                  <label className="block text-sm font-medium text-mono-700 mb-1">
                    –ë–†–£–¢–¢–û
                  </label>
                  <input
                    type="text"
                    value={formatWeight(item.bruttoWeight)}
                    readOnly
                    className="w-full px-3 py-2 border border-mono-300 rounded-lg bg-mono-50 text-sm mb-2"
                    title={`–û—Ç–ª–∞–¥–∫–∞: bruttoWeight = ${item.bruttoWeight}`}
                  />
                  <button
                    type="button"
                    onClick={() => handleGetBruttoWeight(index)}
                    className="w-full px-3 py-2 bg-black text-white rounded-lg hover:bg-black text-sm flex items-center justify-center space-x-1"
                    title="–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å –ë–†–£–¢–¢–û"
                  >
                    <Weight className="h-4 w-4" />
                    <span>–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å</span>
                  </button>
                  <p className="text-xs text-mono-500 mt-1">
                    {formatDateTime(item.bruttoDateTime)}
                  </p>
                </div>

                {/* –¢–ê–†–ê */}
                <div>
                  <label className="block text-sm font-medium text-mono-700 mb-1">
                    –¢–ê–†–ê
                  </label>
                  <input
                    type="text"
                    value={formatWeight(item.taraWeight)}
                    readOnly
                    className="w-full px-3 py-2 border border-mono-300 rounded-lg bg-mono-50 text-sm mb-2"
                  />
                  <button
                    type="button"
                    onClick={() => handleGetTaraWeight(index)}
                    className="w-full px-3 py-2 bg-black text-white rounded-lg hover:bg-mono-800 text-sm flex items-center justify-center space-x-1"
                    title="–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å –¢–ê–†–ê"
                  >
                    <Weight className="h-4 w-4" />
                    <span>–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å</span>
                  </button>
                  <p className="text-xs text-mono-500 mt-1">
                    {formatDateTime(item.taraDateTime)}
                  </p>
                </div>

                {/* –ù–ï–¢–¢–û */}
                <div>
                  <label className="block text-sm font-medium text-mono-700 mb-1">
                    –ù–ï–¢–¢–û
                  </label>
                  <input
                    type="text"
                    value={formatWeight(item.netWeight)}
                    readOnly
                    className="w-full px-3 py-2 border border-mono-300 rounded-lg bg-mono-50 text-sm font-medium"
                  />
                </div>

                {/* –í–ª–∞–∂–Ω–æ—Å—Ç—å */}
                <div>
                  <label className="block text-sm font-medium text-mono-700 mb-1">
                    –í–ª–∞–∂–Ω–æ—Å—Ç—å (%)
                  </label>
                  <input
                    type="number"
                    min="0"
                    max="100"
                    step="0.1"
                    value={item.humidity || ''}
                    onChange={(e) => updateItem(index, 'humidity', parseFloat(e.target.value) || 0)}
                    className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500 text-sm"
                    placeholder="0"
                  />
                </div>

                {/* –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Å */}
                <div>
                  <label className="block text-sm font-medium text-mono-700 mb-1">
                    –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Å
                  </label>
                  <input
                    type="text"
                    value={formatWeight(item.finalWeight)}
                    readOnly
                    className="w-full px-3 py-2 border border-mono-300 rounded-lg bg-mono-100 text-sm font-bold text-black"
                  />
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ */}
        <div>
          <label htmlFor="receivedBy" className="block text-sm font-medium text-mono-700 mb-2">
            –ü—Ä–∏–Ω—è–ª *
          </label>
          <input
            type="text"
            id="receivedBy"
            value={formData.receivedBy}
            onChange={(e) => setFormData(prev => ({ ...prev, receivedBy: e.target.value }))}
            className="w-full px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-mono-500"
            placeholder="–§–ò–û –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
          />
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="flex justify-end space-x-4 pt-6 border-t border-mono-200">
          <button
            type="button"
            onClick={onClose}
            className="px-4 py-2 text-sm font-medium text-mono-700 bg-mono-100 hover:bg-mono-200 rounded-lg transition-colors duration-200"
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button
            type="submit"
            className="px-4 py-2 text-sm font-medium text-white bg-black hover:bg-black rounded-lg transition-colors duration-200"
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </button>
        </div>
      </form>
      </div>
    </Modal>
  )
}
