import { useState } from 'react'
import PageLayout from '../components/PageLayout'
import OrderModal from '../components/orders/OrderModal'
import ViewToggle from '../components/ViewToggle'
import { ConcreteOrder, CreateOrderRequest, UpdateOrderRequest, AdditionalService, ORDER_STATUSES, ORDER_PRIORITIES, ORDER_STATUS_COLORS, ORDER_PRIORITY_COLORS, EMPTY_ADDITIONAL_SERVICES } from '../types/orders'
import { Counterparty, ConcreteGrade, Warehouse } from '../types/directories'
import { useAuthStore } from '../stores/authStore'
import { useLocalStorage } from '../hooks/useLocalStorage'
import { 
  Plus, 
  Search, 
  Package, 
  Building2, 
  MapPin, 
  Calendar, 
  DollarSign, 
  Edit, 
  Trash2, 
  Eye,
  Clock,
  CheckCircle,
  AlertCircle,
  Truck,
  User
} from 'lucide-react'

const mockOrders: ConcreteOrder[] = []
const mockCounterparties: Counterparty[] = []

const mockConcreteGrades: ConcreteGrade[] = []
const mockWarehouses: Warehouse[] = []

export default function OrdersPage() {
  const { user } = useAuthStore()
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ - –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º —Ä–æ–ª—è–º
  const canAccessOrders = true
  
  if (!canAccessOrders) {
    return (
      <PageLayout title="–ó–∞–∫–∞–∑—ã –±–µ—Ç–æ–Ω–∞">
        <div className="p-8 text-center">
          <div className="bg-mono-50 border border-mono-200 rounded-lg p-6 max-w-md mx-auto">
            <div className="text-mono-600 text-6xl mb-4">üö´</div>
            <h2 className="text-xl font-semibold text-mono-800 mb-2">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</h2>
            <p className="text-mono-600">
              –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –±–µ—Ç–æ–Ω–∞. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤.
            </p>
          </div>
        </div>
      </PageLayout>
    )
  }
  
  const [orders, setOrders] = useLocalStorage<ConcreteOrder[]>('orders', mockOrders)
  const [viewMode, setViewMode] = useLocalStorage<'cards' | 'list'>('ordersViewMode', 'list')
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤, –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞, —Å–∫–ª–∞–¥–æ–≤ –∏ —É—Å–ª—É–≥, –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
  const [counterparties, setCounterparties] = useLocalStorage<Counterparty[]>('counterparties', mockCounterparties)
  const [concreteGrades, setConcreteGrades] = useLocalStorage<ConcreteGrade[]>('concreteGrades', mockConcreteGrades)
  const [warehouses] = useLocalStorage<Warehouse[]>('warehouses', mockWarehouses)
  const [additionalServices] = useLocalStorage<AdditionalService[]>('additionalServices', EMPTY_ADDITIONAL_SERVICES)
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const [priorityFilter, setPriorityFilter] = useState<string>('all')
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [editingOrder, setEditingOrder] = useState<ConcreteOrder | null>(null)
  const [viewingOrder, setViewingOrder] = useState<ConcreteOrder | null>(null)

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ—Ç—å —Ü–µ–Ω—ã
  const canViewPrice = user?.role === 'director' || user?.role === 'accountant' || user?.role === 'manager'

  const filteredOrders = orders.filter(order => {
    // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –≤–∏–¥—è—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏
    const isManagerRestricted = user?.role === 'manager' && order.createdBy !== user?.id
    if (isManagerRestricted) return false
    
    const matchesSearch = order.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         order.deliveryObject.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         order.deliveryAddress.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         order.concreteGradeName.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesStatus = statusFilter === 'all' || order.status === statusFilter
    const matchesPriority = priorityFilter === 'all' || order.priority === priorityFilter
    return matchesSearch && matchesStatus && matchesPriority && order.isActive
  })

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending':
        return <Clock className="h-4 w-4" />
      case 'confirmed':
        return <CheckCircle className="h-4 w-4" />
      case 'in_production':
        return <Package className="h-4 w-4" />
      case 'ready':
        return <Truck className="h-4 w-4" />
      case 'delivered':
        return <CheckCircle className="h-4 w-4" />
      case 'completed':
        return <CheckCircle className="h-4 w-4" />
      case 'cancelled':
        return <AlertCircle className="h-4 w-4" />
      default:
        return <Clock className="h-4 w-4" />
    }
  }

  const handleAdd = () => {
    setEditingOrder(null)
    setIsModalOpen(true)
  }

  const handleEdit = (order: ConcreteOrder) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä
    const canEdit = user?.role === 'director' || user?.role === 'accountant'
    
    if (!canEdit) {
      alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä.')
      return
    }
    
    setEditingOrder(order)
    setIsModalOpen(true)
  }

  const handleView = (order: ConcreteOrder) => {
    setViewingOrder(order)
  }

  const handleDelete = (id: string) => {
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    const order = orders.find(o => o.id === id)
    if (!order) return
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä
    const canDelete = user?.role === 'director' || user?.role === 'accountant'
    
    if (!canDelete) {
      alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤. –£–¥–∞–ª—è—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä.')
      return
    }
    
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?')) {
      setOrders(prev => prev.map(order => 
        order.id === id ? { ...order, isActive: false } : order
      ))
    }
  }

  const handleApprove = (order: ConcreteOrder) => {
    if (window.confirm('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Å—Ç–∞—Ç—É—Å "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"?')) {
      setOrders(prev => prev.map(o => 
        o.id === order.id ? { ...o, status: 'confirmed', updatedAt: new Date().toISOString() } : o
      ))
    }
  }

  const handleSetPriority = (order: ConcreteOrder) => {
    const newPriority = prompt(
      `–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order.id}:\n\n1 - –ù–∏–∑–∫–∏–π\n2 - –°—Ä–µ–¥–Ω–∏–π\n3 - –í—ã—Å–æ–∫–∏–π\n4 - –°—Ä–æ—á–Ω—ã–π\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4):`
    )
    
    if (newPriority) {
      const priorityMap = {
        '1': 'low',
        '2': 'medium', 
        '3': 'high',
        '4': 'urgent'
      }
      
      const priority = priorityMap[newPriority as keyof typeof priorityMap] as 'low' | 'medium' | 'high' | 'urgent'
      if (priority) {
        setOrders(prev => prev.map(o => 
          o.id === order.id ? { ...o, priority, updatedAt: new Date().toISOString() } : o
        ))
      } else {
        alert('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4.')
      }
    }
  }

  const handleSave = (data: CreateOrderRequest | UpdateOrderRequest) => {
    if (editingOrder) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ - —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä
      const canEdit = user?.role === 'director' || user?.role === 'accountant'
      
      if (!canEdit) {
        alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä.')
        return
      }
      
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
      setOrders(prev => prev.map(order => 
        order.id === editingOrder.id 
          ? { 
              ...order, 
              ...data, 
              updatedAt: new Date().toISOString(),
              totalPrice: canViewPrice && data.price ? (data.price * (data.quantity || order.quantity)) + ((data.additionalServices || order.additionalServices).reduce((total, service) => total + service.total, 0)) : order.totalPrice
            }
          : order
      ))
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const customer = counterparties.find(c => c.id === data.customerId)
      const concreteGrade = concreteGrades.find(g => g.id === data.concreteGradeId)
      const warehouse = warehouses.find(w => w.id === data.warehouseId)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–¥–∞–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è VIP –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞—è–≤–∫—É —Å–æ–∑–¥–∞–µ—Ç –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä
      const shouldAutoApprove = customer?.autoApprove === true && user?.role !== 'manager'
      
      const newOrder: ConcreteOrder = {
        id: Date.now().toString(),
        customerId: data.customerId || '',
        customerName: customer?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç',
        concreteGradeId: data.concreteGradeId || '',
        concreteGradeName: concreteGrade?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—Ä–∫–∞',
        quantity: data.quantity || 0,
        warehouseId: data.warehouseId || '',
        warehouseName: warehouse?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥',
        deliveryObject: data.deliveryObject || '',
        deliveryAddress: data.deliveryAddress || '',
        deliveryDateTime: data.deliveryDateTime || new Date().toISOString(),
        price: data.price,
        totalPrice: canViewPrice && data.price && data.quantity && data.additionalServices ? (data.price * data.quantity) + data.additionalServices.reduce((total, service) => total + service.total, 0) : undefined,
        additionalServices: data.additionalServices || [],
        status: shouldAutoApprove ? 'confirmed' : 'pending', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è VIP –∫–ª–∏–µ–Ω—Ç–æ–≤
        priority: 'low', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –¥–∏—Ä–µ–∫—Ç–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –Ω—É–∂–Ω—ã–π
        notes: data.notes,
        createdBy: user!.id,
        createdByName: user!.fullName || user!.login,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        isActive: true
      }
      setOrders(prev => [...prev, newOrder])
    }
    setIsModalOpen(false)
    setEditingOrder(null)
  }

  const handleCloseModal = () => {
    setIsModalOpen(false)
    setEditingOrder(null)
  }

  return (
    <PageLayout
      title="–ó–∞–∫–∞–∑—ã –±–µ—Ç–æ–Ω–∞"
      subtitle="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç–∞–≤–∫—É –±–µ—Ç–æ–Ω–∞"
    >
      <div className="space-y-6">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <Package className="h-8 w-8 text-primary-600" />
            <div>
              <h2 className="text-2xl font-bold text-mono-900">–ó–∞–∫–∞–∑—ã –±–µ—Ç–æ–Ω–∞</h2>
              <p className="text-mono-600">–í—Å–µ–≥–æ: {filteredOrders.length}</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <ViewToggle viewMode={viewMode} onViewModeChange={setViewMode} />
            <button 
              onClick={handleAdd}
              className="flex items-center space-x-2 px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-lg transition-colors duration-200"
            >
              <Plus className="h-4 w-4" />
              <span>–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑</span>
            </button>
          </div>
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
        <div className="bg-white rounded-lg border border-mono-200 p-4">
          <div className="flex flex-col lg:flex-row gap-4">
            {/* –ü–æ–∏—Å–∫ */}
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-mono-400" />
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, –æ–±—ä–µ–∫—Ç—É, –∞–¥—Ä–µ—Å—É..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                />
              </div>
            </div>

            {/* –§–∏–ª—å—Ç—Ä—ã */}
            <div className="flex gap-2">
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-transparent"
              >
                <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                {Object.entries(ORDER_STATUSES).map(([value, label]) => (
                  <option key={value} value={value}>{label}</option>
                ))}
              </select>

              <select
                value={priorityFilter}
                onChange={(e) => setPriorityFilter(e.target.value)}
                className="px-3 py-2 border border-mono-300 rounded-lg focus:ring-2 focus:ring-mono-500 focus:border-transparent"
              >
                <option value="all">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
                {Object.entries(ORDER_PRIORITIES).map(([value, label]) => (
                  <option key={value} value={value}>{label}</option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ */}
        {filteredOrders.length === 0 ? (
          <div className="text-center py-12">
            <Package className="h-12 w-12 text-mono-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-mono-900 mb-2">–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p className="text-mono-500">
              {orders.length === 0 
                ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã' 
                : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'
              }
            </p>
          </div>
        ) : viewMode === 'list' ? (
          /* –¢–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥ */
          <div className="bg-white rounded-lg border border-mono-200 overflow-hidden">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-mono-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                      –ó–∞–∫–∞–∑
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                      –ü–æ–∫—É–ø–∞—Ç–µ–ª—å
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                      –ú–∞—Ä–∫–∞ / –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                      –°–∫–ª–∞–¥
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                      –î–æ—Å—Ç–∞–≤–∫–∞
                    </th>
                    {canViewPrice && (
                      <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                        –¶–µ–Ω–∞
                      </th>
                    )}
                    <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                      –°—Ç–∞—Ç—É—Å
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                      –°–æ–∑–¥–∞—Ç–µ–ª—å
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-mono-500 uppercase tracking-wider">
                      –î–µ–π—Å—Ç–≤–∏—è
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredOrders.map((order) => (
                    <tr key={order.id} className="hover:bg-mono-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-mono-900">#{order.id}</div>
                        <div className="text-sm text-mono-500">{order.deliveryObject}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-mono-900">{order.customerName}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-mono-900">{order.concreteGradeName}</div>
                        <div className="text-sm text-mono-500">{order.quantity} –º¬≥</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-mono-900">{order.warehouseName}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-mono-900">
                          {new Date(order.deliveryDateTime).toLocaleDateString('ru-RU')}
                        </div>
                        <div className="text-sm text-mono-500">
                          {new Date(order.deliveryDateTime).toLocaleTimeString('ru-RU', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })}
                        </div>
                      </td>
                      {canViewPrice && (
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-mono-900">
                          {order.totalPrice ? `${order.totalPrice.toLocaleString('ru-RU')} ‚Ç∏` : '‚Äî'}
                        </td>
                      )}
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${ORDER_STATUS_COLORS[order.status]}`}>
                          {getStatusIcon(order.status)}
                          <span className="ml-1">{ORDER_STATUSES[order.status]}</span>
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-mono-900">
                        <div className="flex items-center">
                          <User className="h-4 w-4 text-mono-400 mr-2" />
                          <span>{order.createdByName}</span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          <button 
                            onClick={() => handleView(order)}
                            className="text-black hover:text-black"
                            title="–ü—Ä–æ—Å–º–æ—Ç—Ä"
                          >
                            <Eye className="h-4 w-4" />
                          </button>
                          {user?.role === 'director' && order.status === 'pending' && (
                            <button 
                              onClick={() => handleApprove(order)}
                              className="text-mono-600 hover:text-black"
                              title="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É"
                            >
                              <CheckCircle className="h-4 w-4" />
                            </button>
                          )}
                          {user?.role === 'director' && order.status === 'pending' && (
                            <button 
                              onClick={() => handleSetPriority(order)}
                              className="text-orange-600 hover:text-orange-900"
                              title="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                            >
                              <AlertCircle className="h-4 w-4" />
                            </button>
                          )}
                          {(user?.role === 'director' || user?.role === 'accountant') && order.status === 'pending' && (
                            <button 
                              onClick={() => handleEdit(order)}
                              className="text-indigo-600 hover:text-indigo-900"
                              title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                            >
                              <Edit className="h-4 w-4" />
                            </button>
                          )}
                          {(user?.role === 'director' || user?.role === 'accountant') && order.status === 'pending' && (
                            <button 
                              onClick={() => handleDelete(order.id)}
                              className="text-mono-600 hover:text-black"
                              title="–£–¥–∞–ª–∏—Ç—å"
                            >
                              <Trash2 className="h-4 w-4" />
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        ) : (
          /* –ö–∞—Ä—Ç–æ—á–Ω—ã–π –≤–∏–¥ */
          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            {filteredOrders.map((order) => (
              <div key={order.id} className="bg-white rounded-lg border border-mono-200 p-6 hover:shadow-lg transition-shadow duration-200 relative">
                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */}
                <div className="absolute top-4 right-4 flex items-center gap-1">
                  <button 
                    onClick={() => handleView(order)}
                    className="p-1 text-black hover:text-black rounded hover:bg-mono-50 transition-colors duration-200"
                    title="–ü—Ä–æ—Å–º–æ—Ç—Ä"
                  >
                    <Eye className="h-4 w-4" />
                  </button>
                  {user?.role === 'director' && order.status === 'pending' && (
                    <button 
                      onClick={() => handleApprove(order)}
                      className="p-1 text-mono-600 hover:text-mono-900 rounded hover:bg-mono-50 transition-colors duration-200"
                      title="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É"
                    >
                      <CheckCircle className="h-4 w-4" />
                    </button>
                  )}
                  {user?.role === 'director' && order.status === 'pending' && (
                    <button 
                      onClick={() => handleSetPriority(order)}
                      className="p-1 text-orange-600 hover:text-orange-900 rounded hover:bg-orange-50 transition-colors duration-200"
                      title="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                    >
                      <AlertCircle className="h-4 w-4" />
                    </button>
                  )}
                  {(user?.role === 'director' || user?.role === 'accountant') && order.status === 'pending' && (
                    <button 
                      onClick={() => handleEdit(order)}
                      className="p-1 text-indigo-600 hover:text-indigo-900 rounded hover:bg-indigo-50 transition-colors duration-200"
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                    >
                      <Edit className="h-4 w-4" />
                    </button>
                  )}
                  {(user?.role === 'director' || user?.role === 'accountant') && order.status === 'pending' && (
                    <button 
                      onClick={() => handleDelete(order.id)}
                      className="p-1 text-mono-600 hover:text-black rounded hover:bg-mono-50 transition-colors duration-200"
                      title="–£–¥–∞–ª–∏—Ç—å"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  )}
                </div>

                {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                <div className="mb-4 pr-20">
                  <div className="flex items-center justify-between mb-2">
                    <h3 className="text-lg font-semibold text-mono-900">–ó–∞–∫–∞–∑ #{order.id}</h3>
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium whitespace-nowrap ${ORDER_STATUS_COLORS[order.status]}`}>
                      {getStatusIcon(order.status)}
                      <span className="ml-1">{ORDER_STATUSES[order.status]}</span>
                    </span>
                  </div>
                  <p className="text-sm text-mono-600 mb-2">{order.deliveryObject}</p>
                  <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${ORDER_PRIORITY_COLORS[order.priority]}`}>
                    {ORDER_PRIORITIES[order.priority]}
                  </span>
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ */}
                {(order.assignedDriverName || order.assignedVehicleNumber) && (
                  <div className="mb-4 p-3 bg-mono-50 border border-green-200 rounded-lg">
                    <h5 className="text-xs font-semibold text-mono-800 mb-2">–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ</h5>
                    <div className="space-y-1">
                      {order.assignedDriverName && (
                        <div className="flex items-center text-xs text-mono-700">
                          <User className="h-3 w-3 mr-1" />
                          <span>{order.assignedDriverName}</span>
                        </div>
                      )}
                      {order.assignedVehicleNumber && (
                        <div className="flex items-center text-xs text-mono-700">
                          <Truck className="h-3 w-3 mr-1" />
                          <span>{order.assignedVehicleNumber}</span>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                <div className="space-y-3">
                  <div className="flex items-center text-sm text-mono-600">
                    <Building2 className="h-4 w-4 text-mono-400 mr-2 flex-shrink-0" />
                    <span className="truncate">{order.customerName}</span>
                  </div>

                  <div className="flex items-center text-sm text-mono-600">
                    <Package className="h-4 w-4 text-mono-400 mr-2 flex-shrink-0" />
                    <span>{order.concreteGradeName} - {order.quantity} –º¬≥</span>
                  </div>

                  <div className="flex items-center text-sm text-mono-600">
                    <Building2 className="h-4 w-4 text-mono-400 mr-2 flex-shrink-0" />
                    <span className="truncate">{order.warehouseName}</span>
                  </div>

                  <div className="flex items-center text-sm text-mono-600">
                    <Calendar className="h-4 w-4 text-mono-400 mr-2 flex-shrink-0" />
                    <span>
                      {new Date(order.deliveryDateTime).toLocaleDateString('ru-RU')} –≤{' '}
                      {new Date(order.deliveryDateTime).toLocaleTimeString('ru-RU', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </span>
                  </div>

                  <div className="flex items-center text-sm text-mono-600">
                    <MapPin className="h-4 w-4 text-mono-400 mr-2 flex-shrink-0" />
                    <span className="truncate">{order.deliveryAddress}</span>
                  </div>

                  {canViewPrice && order.totalPrice && (
                    <div className="flex items-center text-sm text-mono-600">
                      <DollarSign className="h-4 w-4 text-mono-400 mr-2 flex-shrink-0" />
                      <span className="font-medium">{order.totalPrice.toLocaleString('ru-RU')} ‚Ç∏</span>
                    </div>
                  )}

                  {order.additionalServices.length > 0 && (
                    <div className="text-sm text-mono-600">
                      <span className="font-medium">–£—Å–ª—É–≥–∏: </span>
                      {order.additionalServices.map(service => service.serviceName).join(', ')}
                    </div>
                  )}

                  <div className="flex items-center text-sm text-mono-600">
                    <User className="h-4 w-4 text-mono-400 mr-2 flex-shrink-0" />
                    <span>–°–æ–∑–¥–∞–Ω: {order.createdByName}</span>
                  </div>
                </div>

                {order.notes && (
                  <div className="mt-4 pt-3 border-t border-mono-200">
                    <p className="text-sm text-mono-600">
                      <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</strong> {order.notes}
                    </p>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <OrderModal
          isOpen={isModalOpen}
          onClose={handleCloseModal}
          title={editingOrder ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'}
          order={editingOrder}
          onSave={handleSave}
          userRole={user?.role || ''}
        />

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
        {viewingOrder && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4">
            <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-start mb-6">
                  <h3 className="text-xl font-semibold text-mono-900">–ó–∞–∫–∞–∑ #{viewingOrder.id}</h3>
                  <button
                    onClick={() => setViewingOrder(null)}
                    className="text-mono-400 hover:text-mono-600"
                  >
                    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-mono-700">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</label>
                      <p className="mt-1 text-sm text-mono-900">{viewingOrder.customerName}</p>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-mono-700">–ú–∞—Ä–∫–∞ –±–µ—Ç–æ–Ω–∞</label>
                      <p className="mt-1 text-sm text-mono-900">{viewingOrder.concreteGradeName}</p>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-mono-700">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                      <p className="mt-1 text-sm text-mono-900">{viewingOrder.quantity} –º¬≥</p>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-mono-700">–°–∫–ª–∞–¥</label>
                      <p className="mt-1 text-sm text-mono-900">{viewingOrder.warehouseName}</p>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-mono-700">–û–±—ä–µ–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏</label>
                      <p className="mt-1 text-sm text-mono-900">{viewingOrder.deliveryObject}</p>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-mono-700">–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</label>
                      <p className="mt-1 text-sm text-mono-900">{viewingOrder.deliveryAddress}</p>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-mono-700">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏</label>
                      <p className="mt-1 text-sm text-mono-900">
                        {new Date(viewingOrder.deliveryDateTime).toLocaleString('ru-RU')}
                      </p>
                    </div>

                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ */}
                    {(viewingOrder.assignedDriverName || viewingOrder.assignedVehicleNumber) && (
                      <div className="bg-mono-50 border border-green-200 rounded-lg p-4">
                        <h4 className="text-sm font-semibold text-mono-900 mb-3">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          {viewingOrder.assignedDriverName && (
                            <div>
                              <label className="block text-xs font-medium text-mono-800">–í–æ–¥–∏—Ç–µ–ª—å</label>
                              <p className="mt-1 text-sm text-mono-900">{viewingOrder.assignedDriverName}</p>
                            </div>
                          )}
                          {viewingOrder.assignedVehicleNumber && (
                            <div>
                              <label className="block text-xs font-medium text-mono-800">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</label>
                              <p className="mt-1 text-sm text-mono-900">{viewingOrder.assignedVehicleNumber}</p>
                            </div>
                          )}
                          {viewingOrder.departureTime && (
                            <div>
                              <label className="block text-xs font-medium text-mono-800">–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</label>
                              <p className="mt-1 text-sm text-mono-900">
                                {new Date(viewingOrder.departureTime).toLocaleString('ru-RU')}
                              </p>
                            </div>
                          )}
                          {viewingOrder.arrivalTime && (
                            <div>
                              <label className="block text-xs font-medium text-mono-800">–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è</label>
                              <p className="mt-1 text-sm text-mono-900">
                                {new Date(viewingOrder.arrivalTime).toLocaleString('ru-RU')}
                              </p>
                            </div>
                          )}
                        </div>
                      </div>
                    )}

                    <div>
                      <label className="block text-sm font-medium text-mono-700">–°—Ç–∞—Ç—É—Å</label>
                      <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${ORDER_STATUS_COLORS[viewingOrder.status]}`}>
                        {getStatusIcon(viewingOrder.status)}
                        <span className="ml-1">{ORDER_STATUSES[viewingOrder.status]}</span>
                      </span>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-mono-700">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                      <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${ORDER_PRIORITY_COLORS[viewingOrder.priority]}`}>
                        {ORDER_PRIORITIES[viewingOrder.priority]}
                      </span>
                    </div>
                  </div>
                </div>

                {canViewPrice && viewingOrder.totalPrice && (
                  <div className="mt-6 p-4 bg-mono-50 rounded-lg">
                    <div className="flex justify-between items-center">
                      <span className="text-sm font-medium text-mono-700">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                      <span className="text-lg font-bold text-mono-900">
                        {viewingOrder.totalPrice.toLocaleString('ru-RU')} ‚Ç∏
                      </span>
                    </div>
                  </div>
                )}

                {viewingOrder.additionalServices.length > 0 && (
                  <div className="mt-6">
                    <label className="block text-sm font-medium text-mono-700 mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</label>
                    <div className="space-y-2">
                      {viewingOrder.additionalServices.map((service) => (
                        <div key={service.serviceId} className="flex justify-between items-center p-2 bg-mono-50 rounded">
                          <span className="text-sm text-mono-900">{service.serviceName}</span>
                          <span className="text-sm font-medium text-mono-900">
                            {service.quantity} √ó {canViewPrice ? `${service.pricePerUnit.toLocaleString('ru-RU')} ‚Ç∏ = ${service.total.toLocaleString('ru-RU')} ‚Ç∏` : '–¶–µ–Ω–∞ —Å–∫—Ä—ã—Ç–∞'}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {viewingOrder.notes && (
                  <div className="mt-6">
                    <label className="block text-sm font-medium text-mono-700 mb-2">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</label>
                    <p className="text-sm text-mono-900 bg-mono-50 p-3 rounded">{viewingOrder.notes}</p>
                  </div>
                )}

                <div className="mt-6 flex justify-end">
                  <button
                    onClick={() => setViewingOrder(null)}
                    className="px-4 py-2 bg-mono-300 text-mono-700 rounded-lg hover:bg-mono-400 transition-colors duration-200"
                  >
                    –ó–∞–∫—Ä—ã—Ç—å
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </PageLayout>
  )
}
