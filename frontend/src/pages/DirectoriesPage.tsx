import React, { useState } from 'react'
import PageLayout from '../components/PageLayout'
import CounterpartyModal from '../components/directories/CounterpartyModal'
import { Plus, Building2, Users, Package, Truck, User, Database, X } from 'lucide-react'

interface Counterparty {
  id: string
  name: string
  type: 'client' | 'supplier'
  organizationType: 'legal' | 'individual'
  bin?: string
  iin?: string
  address?: string
  contactPerson?: string
  phone?: string
  email?: string
  isActive: boolean
  createdAt: string
  updatedAt: string
}

export default function DirectoriesPage() {
  const [activeTab, setActiveTab] = useState<'counterparties' | 'warehouses' | 'materials' | 'concrete-grades' | 'vehicles' | 'drivers'>('counterparties')
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [editingCounterparty, setEditingCounterparty] = useState<Counterparty | null>(null)
  const [counterparties, setCounterparties] = useState<Counterparty[]>([])

  const tabs = [
    { id: 'counterparties', label: '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã', icon: Building2 },
    { id: 'warehouses', label: '–°–∫–ª–∞–¥—ã', icon: Database },
    { id: 'materials', label: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', icon: Package },
    { id: 'concrete-grades', label: '–ú–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞', icon: Package },
    { id: 'vehicles', label: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', icon: Truck },
    { id: 'drivers', label: '–í–æ–¥–∏—Ç–µ–ª–∏', icon: User }
  ]

  const handleAdd = () => {
    setEditingCounterparty(null)
    setIsModalOpen(true)
  }

  const handleEdit = (counterparty: Counterparty) => {
    setEditingCounterparty(counterparty)
    setIsModalOpen(true)
  }

  const handleSave = (data: Omit<Counterparty, 'id' | 'createdAt' | 'updatedAt'>) => {
    if (editingCounterparty) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      setCounterparties(prev => prev.map(c => 
        c.id === editingCounterparty.id 
          ? { ...c, ...data, updatedAt: new Date().toISOString() }
          : c
      ))
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ
      const newCounterparty: Counterparty = {
        ...data,
        id: Date.now().toString(),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
      setCounterparties(prev => [...prev, newCounterparty])
    }
    setIsModalOpen(false)
    setEditingCounterparty(null)
  }

  const handleDelete = (id: string) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞?')) {
      setCounterparties(prev => prev.filter(c => c.id !== id))
    }
  }

  const renderCounterparties = () => (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-4">
          <Building2 className="h-8 w-8 text-mono-600" />
          <div>
            <h2 className="text-2xl font-bold text-mono-900">–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã</h2>
            <p className="text-mono-600">–í—Å–µ–≥–æ: {counterparties.length}</p>
          </div>
        </div>
        <button 
          onClick={handleAdd}
          className="flex items-center space-x-2 px-4 py-2 bg-mono-600 hover:bg-mono-700 text-white rounded-lg transition-colors duration-200"
        >
          <Plus className="h-4 w-4" />
          <span>–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞</span>
        </button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ */}
      {counterparties.length === 0 ? (
        <div className="text-center py-12">
          <Building2 className="h-12 w-12 text-mono-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-mono-900 mb-2">–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p className="text-mono-500">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
        </div>
      ) : (
        <div className="bg-white rounded-lg border border-mono-200 overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-mono-200">
              <thead className="bg-mono-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                    –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                    –¢–∏–ø
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                    –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                    –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-mono-500 uppercase tracking-wider">
                    –¢–µ–ª–µ—Ñ–æ–Ω
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-mono-500 uppercase tracking-wider">
                    –î–µ–π—Å—Ç–≤–∏—è
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-mono-200">
                {counterparties.map((counterparty) => (
                  <tr key={counterparty.id} className="hover:bg-mono-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-mono-900">{counterparty.name}</div>
                      <div className="text-sm text-mono-500">
                        {counterparty.organizationType === 'legal' ? `–ë–ò–ù: ${counterparty.bin}` : `–ò–ò–ù: ${counterparty.iin}`}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                        counterparty.type === 'client' 
                          ? 'bg-mono-100 text-mono-800' 
                          : 'bg-mono-100 text-mono-800'
                      }`}>
                        {counterparty.type === 'client' ? '–ö–ª–∏–µ–Ω—Ç' : '–ü–æ—Å—Ç–∞–≤—â–∏–∫'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-mono-900">
                      {counterparty.organizationType === 'legal' ? '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ' : '–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-mono-900">
                      {counterparty.contactPerson}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-mono-900">
                      {counterparty.phone || '‚Äî'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex justify-end space-x-2">
                        <button 
                          onClick={() => handleEdit(counterparty)}
                          className="text-mono-600 hover:text-black"
                          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                        >
                          <Users className="h-4 w-4" />
                        </button>
                        <button 
                          onClick={() => handleDelete(counterparty.id)}
                          className="text-mono-600 hover:text-black"
                          title="–£–¥–∞–ª–∏—Ç—å"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  )

  const renderPlaceholder = (title: string, description: string) => (
    <div className="text-center py-12">
      <div className="text-6xl mb-4">üöß</div>
      <h3 className="text-lg font-medium text-mono-900 mb-2">{title}</h3>
      <p className="text-mono-500">{description}</p>
    </div>
  )

  return (
    <PageLayout
      title="–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏"
      subtitle="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–æ–π –∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏"
    >
      <div className="space-y-6">
        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="border-b border-mono-200">
          <nav className="-mb-px flex space-x-8">
            {tabs.map((tab) => {
              const Icon = tab.icon
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id as any)}
                  className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${
                    activeTab === tab.id
                      ? 'border-mono-500 text-mono-600'
                      : 'border-transparent text-mono-500 hover:text-mono-700 hover:border-mono-300'
                  }`}
                >
                  <Icon className="h-4 w-4" />
                  <span>{tab.label}</span>
                </button>
              )
            })}
          </nav>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
        <div className="min-h-[400px]">
          {activeTab === 'counterparties' && renderCounterparties()}
          {activeTab === 'warehouses' && renderPlaceholder('–°–∫–ª–∞–¥—ã', '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
          {activeTab === 'materials' && renderPlaceholder('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
          {activeTab === 'concrete-grades' && renderPlaceholder('–ú–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞', '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
          {activeTab === 'vehicles' && renderPlaceholder('–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
          {activeTab === 'drivers' && renderPlaceholder('–í–æ–¥–∏—Ç–µ–ª–∏', '–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ */}
        <CounterpartyModal
          isOpen={isModalOpen}
          onClose={() => {
            setIsModalOpen(false)
            setEditingCounterparty(null)
          }}
          onSave={handleSave}
          counterparty={editingCounterparty}
        />
      </div>
    </PageLayout>
  )
}
