import React, { useState } from 'react'
import ResponsiveLayout from '../components/ResponsiveLayout'
import MobileMessengerLayout from '../components/messenger/MobileMessengerLayout'
import ChatList from '../components/messenger/ChatList'
import MessageList from '../components/messenger/MessageList'
import { Chat, Message } from '../types/messenger'
import { useAuthStore } from '../stores/authStore'
import { useLocalStorage } from '../hooks/useLocalStorage'
import { useMobile } from '../hooks/useMobile'
import { MessageCircle } from 'lucide-react'

const mockChats: Chat[] = [
  {
    id: 'chat-1',
    name: '–ü–µ—Ç—è',
    type: 'private',
    participants: [
      { id: 'user-1', name: '–ü–µ—Ç—è', role: 'manager' },
      { id: 'user-2', name: '–í—ã', role: 'developer' }
    ],
    lastMessage: {
      id: 'msg-1',
      senderId: 'user-1',
      senderName: '–ü–µ—Ç—è',
      senderRole: 'manager',
      chatId: 'chat-1',
      chatType: 'private',
      content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º?',
      messageType: 'text',
      timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
      isRead: false
    },
    lastMessageAt: new Date(Date.now() - 1000 * 60 * 30).toISOString(),
    unreadCount: 2,
    isActive: true,
    createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
    updatedAt: new Date(Date.now() - 1000 * 60 * 30).toISOString()
  },
  {
    id: 'chat-2',
    name: '–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
    type: 'group',
    participants: [
      { id: 'user-1', name: '–ü–µ—Ç—è', role: 'manager' },
      { id: 'user-2', name: '–í—ã', role: 'developer' },
      { id: 'user-3', name: '–ê–Ω–Ω–∞', role: 'developer' },
      { id: 'user-4', name: '–ú–∏—Ö–∞–∏–ª', role: 'designer' }
    ],
    lastMessage: {
      id: 'msg-2',
      senderId: 'user-3',
      senderName: '–ê–Ω–Ω–∞',
      senderRole: 'developer',
      chatId: 'chat-2',
      chatType: 'group',
      content: '–ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ üéâ',
      messageType: 'text',
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
      isRead: true
    },
    lastMessageAt: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),
    unreadCount: 0,
    isActive: true,
    createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 7).toISOString(), // 1 –Ω–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥
    updatedAt: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString()
  },
  {
    id: 'chat-3',
    name: '–ú–∞—Ä–∏—è',
    type: 'private',
    participants: [
      { id: 'user-5', name: '–ú–∞—Ä–∏—è', role: 'accountant' },
      { id: 'user-2', name: '–í—ã', role: 'developer' }
    ],
    lastMessage: {
      id: 'msg-3',
      senderId: 'user-5',
      senderName: '–ú–∞—Ä–∏—è',
      senderRole: 'accountant',
      chatId: 'chat-3',
      chatType: 'private',
      content: '–î–æ–∫—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã, –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å',
      messageType: 'text',
      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(), // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
      isRead: true
    },
    lastMessageAt: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(),
    unreadCount: 0,
    isActive: true,
    createdAt: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3).toISOString(), // 3 –¥–Ω—è –Ω–∞–∑–∞–¥
    updatedAt: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString()
  }
]

const mockMessages: Message[] = [
  {
    id: 'msg-1',
    senderId: 'user-1',
    senderName: '–ü–µ—Ç—è',
    senderRole: 'manager',
    chatId: 'chat-1',
    chatType: 'private',
    content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º?',
    messageType: 'text',
    timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(),
    isRead: false
  },
  {
    id: 'msg-2',
    senderId: 'user-2',
    senderName: '–í—ã',
    senderRole: 'developer',
    chatId: 'chat-1',
    chatType: 'private',
    content: '–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –§—É–Ω–∫—Ü–∏–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç',
    messageType: 'text',
    timestamp: new Date(Date.now() - 1000 * 60 * 25).toISOString(),
    isRead: true
  },
  {
    id: 'msg-3',
    senderId: 'user-1',
    senderName: '–ü–µ—Ç—è',
    senderRole: 'manager',
    chatId: 'chat-1',
    chatType: 'private',
    content: '–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∫–∞–∂–∏ –º–Ω–µ –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç üòä',
    messageType: 'text',
    timestamp: new Date(Date.now() - 1000 * 60 * 20).toISOString(),
    isRead: false
  },
  {
    id: 'msg-4',
    senderId: 'user-3',
    senderName: '–ê–Ω–Ω–∞',
    senderRole: 'developer',
    chatId: 'chat-2',
    chatType: 'group',
    content: '–ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ üéâ',
    messageType: 'text',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),
    isRead: true
  },
  {
    id: 'msg-5',
    senderId: 'user-4',
    senderName: '–ú–∏—Ö–∞–∏–ª',
    senderRole: 'designer',
    chatId: 'chat-2',
    chatType: 'group',
    content: '–°—É–ø–µ—Ä! –î–∏–∑–∞–π–Ω —Ç–æ–∂–µ –≥–æ—Ç–æ–≤ üëç',
    messageType: 'text',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 1.5).toISOString(),
    isRead: true
  },
  {
    id: 'msg-6',
    senderId: 'user-5',
    senderName: '–ú–∞—Ä–∏—è',
    senderRole: 'accountant',
    chatId: 'chat-3',
    chatType: 'private',
    content: '–î–æ–∫—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã, –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å',
    messageType: 'text',
    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24).toISOString(),
    isRead: true
  }
]

export default function MessengerPage() {
  const { user } = useAuthStore()
  const { isNative } = useMobile()
  const [selectedChat, setSelectedChat] = useState<Chat | null>(null)
  const [chats, setChats] = useLocalStorage<Chat[]>('chats', mockChats)
  const [messages, setMessages] = useLocalStorage<Message[]>('messages', mockMessages)

  const selectedChatId = selectedChat?.id


  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('MessengerPage Debug:', {
    user: user?.id,
    chatsCount: chats.length,
    messagesCount: messages.length,
    chats: chats.map(c => ({ id: c.id, name: c.name, type: c.type }))
  })

  const handleChatSelect = (chat: Chat) => {
    setSelectedChat(chat)

    // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    if (chat.unreadCount > 0) {
      setMessages(prev =>
        prev.map(msg =>
          msg.chatId === chat.id && !msg.isRead
            ? { ...msg, isRead: true }
            : msg
        )
      )

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç–µ
      setChats(prev =>
        prev.map(c =>
          c.id === chat.id
            ? { ...c, unreadCount: 0 }
            : c
        )
      )
    }
  }

  const handleSendMessage = (content: string, replyTo?: string) => {
    if (!user || !selectedChat) return

    const newMessage: Message = {
      id: Date.now().toString(),
      senderId: user.id,
      senderName: user.fullName || user.login,
      senderRole: user.role,
      chatId: selectedChat.id,
      chatType: selectedChat.type,
      recipientId: selectedChat.type === 'private'
        ? selectedChat.participants.find(p => p.id !== user.id)?.id
        : undefined,
      recipientName: selectedChat.type === 'private'
        ? selectedChat.participants.find(p => p.id !== user.id)?.name
        : undefined,
      recipientRole: selectedChat.type === 'private'
        ? selectedChat.participants.find(p => p.id !== user.id)?.role
        : undefined,
      content,
      messageType: 'text',
      timestamp: new Date().toISOString(),
      isRead: false,
      replyTo
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫)
    setMessages(prev => [...prev, newMessage])

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    setChats(prev =>
      prev.map(chat =>
        chat.id === selectedChat.id
          ? {
            ...chat,
            lastMessage: newMessage,
            lastMessageAt: newMessage.timestamp,
            unreadCount: selectedChat.type === 'group' ? chat.unreadCount + 1 : chat.unreadCount
          }
          : chat
      )
    )
  }

  if (!user) {
    return (
      <ResponsiveLayout>
        <div className="flex items-center justify-center min-h-96">
          <div className="text-center">
            <h3 className="text-lg font-medium text-mono-900 mb-2">
              –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
            </h3>
            <p className="text-mono-600">–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É</p>
          </div>
        </div>
      </ResponsiveLayout>
    )
  }

  // –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
  if (isNative || window.innerWidth < 768) {
    return (
      <MobileMessengerLayout
        chats={chats}
        messages={messages}
        selectedChat={selectedChat}
        onChatSelect={handleChatSelect}
        onSendMessage={handleSendMessage}
        currentUserId={user.id}
        onUpdateMessages={setMessages}
        onUpdateChat={setSelectedChat}
      />
    )
  }

  // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è
  return (
    <ResponsiveLayout>
      <div className="card overflow-hidden h-[600px] md:h-[700px] flex">
        {/* Mobile: Show either chat list or messages */}
        <div className="md:hidden w-full">
          {!selectedChat ? (
            <ChatList
              chats={chats}
              onChatSelect={handleChatSelect}
              selectedChatId={selectedChatId}
              currentUserId={user.id}
            />
          ) : (
            <MessageList
              chat={selectedChat}
              messages={messages}
              onSendMessage={handleSendMessage}
              onBackToChats={() => setSelectedChat(null)}
              onUpdateMessages={setMessages}
              onUpdateChat={setSelectedChat}
            />
          )}
        </div>

        {/* Desktop: Show both side by side */}
        <div className="hidden md:flex w-full">
          <ChatList
            chats={chats}
            onChatSelect={handleChatSelect}
            selectedChatId={selectedChatId}
            currentUserId={user.id}
          />
          <MessageList
            chat={selectedChat}
            messages={messages}
            onSendMessage={handleSendMessage}
            onUpdateMessages={setMessages}
            onUpdateChat={setSelectedChat}
          />
        </div>
      </div>

      {/* Quick Stats */}
      <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="card-interactive animate-slide-up">
          <div className="flex items-center justify-between">
            <div>
              <h4 className="font-semibold text-mono-700 text-sm uppercase tracking-wide">–í—Å–µ–≥–æ —á–∞—Ç–æ–≤</h4>
              <p className="text-3xl font-bold text-black mt-2">
                {chats.length}
              </p>
            </div>
            <div className="p-4 bg-black rounded-lg group-hover:scale-110 transition-transform duration-300">
              <MessageCircle className="h-8 w-8 text-white" />
            </div>
          </div>
        </div>

        <div className="card-interactive animate-slide-up" style={{ animationDelay: '100ms' }}>
          <div className="flex items-center justify-between">
            <div>
              <h4 className="font-semibold text-mono-700 text-sm uppercase tracking-wide">–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã</h4>
              <p className="text-3xl font-bold text-black mt-2">
                {chats.filter(chat => chat.isActive).length}
              </p>
            </div>
            <div className="p-4 bg-mono-800 rounded-lg group-hover:scale-110 transition-transform duration-300">
              <MessageCircle className="h-8 w-8 text-white" />
            </div>
          </div>
        </div>

        <div className="card-interactive animate-slide-up" style={{ animationDelay: '200ms' }}>
          <div className="flex items-center justify-between">
            <div>
              <h4 className="font-semibold text-mono-700 text-sm uppercase tracking-wide">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ</h4>
              <p className="text-3xl font-bold text-black mt-2">
                {chats.reduce((sum, chat) => sum + chat.unreadCount, 0)}
              </p>
            </div>
            <div className="p-4 bg-mono-600 rounded-lg group-hover:scale-110 transition-transform duration-300">
              <MessageCircle className="h-8 w-8 text-white" />
            </div>
          </div>
        </div>
      </div>


      {/* Info */}
      <div className="mt-8 card-primary animate-fade-in">
        <div className="flex items-start space-x-4 mb-6">
          <div className="p-3 bg-black rounded-lg">
            <MessageCircle className="h-6 w-6 text-white" />
          </div>
          <div>
            <h4 className="text-xl font-bold text-black mb-2">–û –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ</h4>
            <p className="text-mono-600 leading-relaxed">
              –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –º–µ–∂–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏—á–Ω—ã–µ –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
            </p>
          </div>
        </div>

        <div className="grid md:grid-cols-2 gap-6">
          <div className="space-y-3">
            <h5 className="font-semibold text-black flex items-center">
              <div className="w-2 h-2 bg-black rounded-full mr-2"></div>
              –§—É–Ω–∫—Ü–∏–∏
            </h5>
            <div className="space-y-2">
              {[
                '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π',
                '–û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è',
                '–ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã',
                '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏'
              ].map((feature, index) => (
                <div key={index} className="flex items-center space-x-2 text-sm text-mono-600">
                  <div className="w-1.5 h-1.5 bg-mono-800 rounded-full"></div>
                  <span>{feature}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="space-y-3">
            <h5 className="font-semibold text-black flex items-center">
              <div className="w-2 h-2 bg-black rounded-full mr-2"></div>
              –î–æ—Å—Ç—É–ø
            </h5>
            <p className="text-sm text-mono-600 leading-relaxed">
              –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã.
              –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–æ–ª–µ–≤—É—é –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–∞.
            </p>
          </div>
        </div>
      </div>
    </ResponsiveLayout>
  )
}
