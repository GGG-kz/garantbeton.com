import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:4000/api'

console.log('üöÄ Optimized API Client initialized:', API_BASE_URL)

// –ö—ç—à –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
const requestCache = new Map<string, {
  data: any
  timestamp: number
  ttl: number
}>()

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now()
  for (const [key, entry] of requestCache.entries()) {
    if (now - entry.timestamp > entry.ttl) {
      requestCache.delete(key)
    }
  }
}, 5 * 60 * 1000)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
function getCacheKey(config: AxiosRequestConfig): string {
  const { method, url, params, data } = config
  return `${method}:${url}:${JSON.stringify(params)}:${JSON.stringify(data)}`
}

// –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
export const optimizedApiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 15000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
  headers: {
    'Content-Type': 'application/json',
    'Accept-Encoding': 'gzip, deflate, br',
  },
})

// Request interceptor —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
optimizedApiClient.interceptors.request.use(
  (config) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
    const token = localStorage.getItem('auth-storage')
    if (token) {
      try {
        const authData = JSON.parse(token)
        if (authData.state?.accessToken) {
          config.headers.Authorization = `Bearer ${authData.state.accessToken}`
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–∫–µ–Ω–∞:', error)
      }
    }

    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    config.headers['Cache-Control'] = 'no-cache'
    
    // –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (config.method === 'get' && !config.headers['X-No-Cache']) {
      const cacheKey = getCacheKey(config)
      const cached = requestCache.get(cacheKey)
      
      if (cached && Date.now() - cached.timestamp < cached.ttl) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return Promise.reject({
          __cached: true,
          data: cached.data,
          config
        })
      }
    }

    return config
  },
  (error) => Promise.reject(error)
)

// Response interceptor —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
optimizedApiClient.interceptors.response.use(
  (response: AxiosResponse) => {
    // –ö—ç—à–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å—ã
    if (response.config.method === 'get' && !response.config.headers['X-No-Cache']) {
      const cacheKey = getCacheKey(response.config)
      const ttl = response.headers['cache-control']?.includes('max-age') 
        ? parseInt(response.headers['cache-control'].match(/max-age=(\d+)/)?.[1] || '300') * 1000
        : 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      requestCache.set(cacheKey, {
        data: response.data,
        timestamp: Date.now(),
        ttl
      })
    }

    return response
  },
  async (error) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (error.__cached) {
      return Promise.resolve({
        data: error.data,
        status: 200,
        statusText: 'OK (cached)',
        headers: {},
        config: error.config
      })
    }

    const originalRequest = error.config

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 401 –æ—à–∏–±–æ–∫ —Å refresh token
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true

      try {
        const token = localStorage.getItem('auth-storage')
        if (token) {
          const authData = JSON.parse(token)
          if (authData.state?.refreshToken) {
            const response = await axios.post(`${API_BASE_URL}/auth/refresh`, {
              refreshToken: authData.state.refreshToken,
            })

            const newAccessToken = response.data.accessToken
            authData.state.accessToken = newAccessToken
            localStorage.setItem('auth-storage', JSON.stringify(authData))

            originalRequest.headers.Authorization = `Bearer ${newAccessToken}`
            return optimizedApiClient(originalRequest)
          }
        }
      } catch (refreshError) {
        localStorage.removeItem('auth-storage')
        window.location.href = '/login'
        return Promise.reject(refreshError)
      }
    }

    return Promise.reject(error)
  }
)

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã API
export const optimizedApi = {
  // GET —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  get: <T = any>(url: string, config?: AxiosRequestConfig & { ttl?: number }) => {
    return optimizedApiClient.get<T>(url, config)
  },

  // GET –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—Å–µ–≥–¥–∞ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ)
  getFresh: <T = any>(url: string, config?: AxiosRequestConfig) => {
    return optimizedApiClient.get<T>(url, {
      ...config,
      headers: {
        ...config?.headers,
        'X-No-Cache': 'true'
      }
    })
  },

  // POST —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫—ç—à–∞
  post: <T = any>(url: string, data?: any, config?: AxiosRequestConfig) => {
    // –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –∫—ç—à
    const baseUrl = url.split('/')[0]
    for (const key of requestCache.keys()) {
      if (key.includes(baseUrl)) {
        requestCache.delete(key)
      }
    }
    
    return optimizedApiClient.post<T>(url, data, config)
  },

  // PUT —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫—ç—à–∞
  put: <T = any>(url: string, data?: any, config?: AxiosRequestConfig) => {
    const baseUrl = url.split('/')[0]
    for (const key of requestCache.keys()) {
      if (key.includes(baseUrl)) {
        requestCache.delete(key)
      }
    }
    
    return optimizedApiClient.put<T>(url, data, config)
  },

  // DELETE —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫—ç—à–∞
  delete: <T = any>(url: string, config?: AxiosRequestConfig) => {
    const baseUrl = url.split('/')[0]
    for (const key of requestCache.keys()) {
      if (key.includes(baseUrl)) {
        requestCache.delete(key)
      }
    }
    
    return optimizedApiClient.delete<T>(url, config)
  },

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
  clearCache: () => {
    requestCache.clear()
  },

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
  clearCachePattern: (pattern: string) => {
    for (const key of requestCache.keys()) {
      if (key.includes(pattern)) {
        requestCache.delete(key)
      }
    }
  },

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  prefetch: <T = any>(url: string, config?: AxiosRequestConfig) => {
    return optimizedApiClient.get<T>(url, config).catch(() => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
    })
  }
}

// Batch –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
export const batchApi = {
  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  parallel: <T = any>(requests: Promise<AxiosResponse<T>>[]) => {
    return Promise.allSettled(requests)
  },

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º concurrency
  concurrent: async <T = any>(
    requests: (() => Promise<AxiosResponse<T>>)[],
    limit = 3
  ) => {
    const results: AxiosResponse<T>[] = []
    
    for (let i = 0; i < requests.length; i += limit) {
      const batch = requests.slice(i, i + limit)
      const batchResults = await Promise.allSettled(
        batch.map(request => request())
      )
      
      batchResults.forEach(result => {
        if (result.status === 'fulfilled') {
          results.push(result.value)
        }
      })
    }
    
    return results
  },

  // Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  batchMutate: async <T = any>(
    operations: Array<{
      method: 'post' | 'put' | 'delete'
      url: string
      data?: any
    }>
  ) => {
    const requests = operations.map(op => {
      switch (op.method) {
        case 'post':
          return () => optimizedApi.post<T>(op.url, op.data)
        case 'put':
          return () => optimizedApi.put<T>(op.url, op.data)
        case 'delete':
          return () => optimizedApi.delete<T>(op.url)
        default:
          throw new Error(`Unsupported method: ${op.method}`)
      }
    })

    return batchApi.concurrent(requests, 2) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º—É—Ç–∞—Ü–∏–π
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const performanceUtils = {
  // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  measureRequest: async <T = any>(
    requestFn: () => Promise<AxiosResponse<T>>,
    label?: string
  ) => {
    const start = performance.now()
    try {
      const result = await requestFn()
      const duration = performance.now() - start
      console.log(`üöÄ ${label || 'Request'} completed in ${duration.toFixed(2)}ms`)
      return result
    } catch (error) {
      const duration = performance.now() - start
      console.error(`‚ùå ${label || 'Request'} failed after ${duration.toFixed(2)}ms`, error)
      throw error
    }
  },

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
  getCacheStats: () => {
    const now = Date.now()
    let validEntries = 0
    let expiredEntries = 0
    
    for (const [, entry] of requestCache.entries()) {
      if (now - entry.timestamp < entry.ttl) {
        validEntries++
      } else {
        expiredEntries++
      }
    }

    return {
      totalEntries: requestCache.size,
      validEntries,
      expiredEntries,
      hitRatio: validEntries / (validEntries + expiredEntries) || 0
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { optimizedApiClient as apiClient }