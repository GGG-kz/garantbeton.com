// –°–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ—Å–∞–º —á–µ—Ä–µ–∑ TCP/IP
const net = require('net');
const SerialPort = require('serialport');
const Readline = require('@serialport/parser-readline');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ COM-–ø–æ—Ä—Ç–∞ –¥–ª—è –≤–µ—Å–æ–≤
const COM_PORT = 'COM3';
const BAUD_RATE = 9600;
const TCP_PORT = 8080;

let scalesPort = null;
let connectedClients = new Set();

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º
function connectToScales() {
  try {
    scalesPort = new SerialPort(COM_PORT, {
      baudRate: BAUD_RATE,
      dataBits: 8,
      stopBits: 1,
      parity: 'none'
    });

    const parser = scalesPort.pipe(new Readline({ delimiter: '\r\n' }));

    scalesPort.on('open', () => {
      console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≤–µ—Å–∞–º –Ω–∞ ${COM_PORT}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Å–∞ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –≤–µ—Å–æ–≤)
      scalesPort.write('W\r\n'); // –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–∞
    });

    parser.on('data', (data) => {
      console.log(`üìä –î–∞–Ω–Ω—ã–µ —Å –≤–µ—Å–æ–≤: ${data}`);
      
      // –ü–∞—Ä—Å–∏–º –≤–µ—Å –∏–∑ –¥–∞–Ω–Ω—ã—Ö (—Ñ–æ—Ä–º–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –≤–µ—Å–æ–≤)
      const weightMatch = data.match(/(\d+\.?\d*)/);
      if (weightMatch) {
        const weight = parseFloat(weightMatch[1]);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        const message = JSON.stringify({
          type: 'weight',
          value: weight,
          unit: 'kg',
          timestamp: new Date().toISOString()
        });
        
        connectedClients.forEach(client => {
          if (client.writable) {
            client.write(message + '\n');
          }
        });
      }
    });

    scalesPort.on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Å–æ–≤:', err.message);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ—Å–∞–º:', error.message);
  }
}

// –°–æ–∑–¥–∞–µ–º TCP —Å–µ—Ä–≤–µ—Ä
const server = net.createServer((client) => {
  console.log(`üîó –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${client.remoteAddress}:${client.remotePort}`);
  connectedClients.add(client);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  client.write(JSON.stringify({
    type: 'connected',
    message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É –≤–µ—Å–æ–≤',
    port: COM_PORT,
    timestamp: new Date().toISOString()
  }) + '\n');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  client.on('data', (data) => {
    try {
      const command = JSON.parse(data.toString().trim());
      
      switch (command.type) {
        case 'get_weight':
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å —Å –≤–µ—Å–æ–≤
          if (scalesPort && scalesPort.isOpen) {
            scalesPort.write('W\r\n');
          } else {
            client.write(JSON.stringify({
              type: 'error',
              message: '–í–µ—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã'
            }) + '\n');
          }
          break;
          
        case 'tare':
          // –û–±–Ω—É–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤
          if (scalesPort && scalesPort.isOpen) {
            scalesPort.write('T\r\n');
            client.write(JSON.stringify({
              type: 'tare',
              message: '–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω—É–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
            }) + '\n');
          }
          break;
          
        default:
          client.write(JSON.stringify({
            type: 'error',
            message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞'
          }) + '\n');
      }
    } catch (error) {
      client.write(JSON.stringify({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã'
      }) + '\n');
    }
  });

  client.on('end', () => {
    console.log(`üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${client.remoteAddress}:${client.remotePort}`);
    connectedClients.delete(client);
  });

  client.on('error', (error) => {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: ${error.message}`);
    connectedClients.delete(client);
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
server.listen(TCP_PORT, () => {
  console.log(`üöÄ TCP —Å–µ—Ä–≤–µ—Ä –≤–µ—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${TCP_PORT}`);
  console.log(`üì° –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: ${getLocalIP()}:${TCP_PORT}`);
  console.log(`‚öñÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–µ—Å–∞–º –Ω–∞ ${COM_PORT}...`);
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–µ—Å–∞–º
  connectToScales();
});

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
function getLocalIP() {
  const interfaces = require('os').networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const interface of interfaces[name]) {
      if (interface.family === 'IPv4' && !interface.internal) {
        return interface.address;
      }
    }
  }
  return 'localhost';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.on('SIGINT', () => {
  console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  
  if (scalesPort && scalesPort.isOpen) {
    scalesPort.close();
  }
  
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

console.log('‚öñÔ∏è –°–µ—Ä–≤–µ—Ä —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ—Å–∞–º');
console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
console.log('1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js');
console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install serialport @serialport/parser-readline');
console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: node scales-server.js');
console.log('4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–µ—Å—ã –∫ COM3 –ø–æ—Ä—Ç—É');
console.log('5. –î—Ä—É–≥–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã —Å–º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –ø–æ TCP');
