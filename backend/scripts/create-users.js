const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function createUsers() {
  try {
    console.log('üîê –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    const adminPassword = 'admin123';
    const adminHash = await bcrypt.hash(adminPassword, 12);
    
    const admin = await prisma.user.upsert({
      where: { login: 'admin' },
      update: {
        password_hash: adminHash,
        role: 'ADMIN',
        updatedAt: new Date()
      },
      create: {
        login: 'admin',
        password_hash: adminHash,
        role: 'ADMIN',
        updatedAt: new Date()
      }
    });

    console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω:', {
      id: admin.id,
      login: admin.login,
      role: admin.role,
      password: adminPassword
    });

    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    const developerPassword = 'developer123';
    const developerHash = await bcrypt.hash(developerPassword, 12);
    
    const developer = await prisma.user.upsert({
      where: { login: 'developer' },
      update: {
        password_hash: developerHash,
        role: 'DEVELOPER',
        updatedAt: new Date()
      },
      create: {
        login: 'developer',
        password_hash: developerHash,
        role: 'DEVELOPER',
        updatedAt: new Date()
      }
    });

    console.log('‚úÖ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω:', {
      id: developer.id,
      login: developer.login,
      role: developer.role,
      password: developerPassword
    });

    // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userPassword = 'user123';
    const userHash = await bcrypt.hash(userPassword, 12);
    
    const user = await prisma.user.upsert({
      where: { login: 'user' },
      update: {
        password_hash: userHash,
        role: 'USER',
        updatedAt: new Date()
      },
      create: {
        login: 'user',
        password_hash: userHash,
        role: 'USER',
        updatedAt: new Date()
      }
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', {
      id: user.id,
      login: user.login,
      role: user.role,
      password: userPassword
    });

    // –°–æ–∑–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    const driverPassword = 'driver123';
    const driverHash = await bcrypt.hash(driverPassword, 12);
    
    const driver = await prisma.user.upsert({
      where: { login: 'driver' },
      update: {
        password_hash: driverHash,
        role: 'DRIVER',
        updatedAt: new Date()
      },
      create: {
        login: 'driver',
        password_hash: driverHash,
        role: 'DRIVER',
        updatedAt: new Date()
      }
    });

    console.log('‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', {
      id: driver.id,
      login: driver.login,
      role: driver.role,
      password: driverPassword
    });

    console.log('\nüéâ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('üëë –ê–¥–º–∏–Ω: admin / admin123');
    console.log('üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: developer / developer123');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: user / user123');
    console.log('üöõ –í–æ–¥–∏—Ç–µ–ª—å: driver / driver123');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createUsers();
