import * as dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

interface EnvVar {
  name: string;
  value: string | undefined;
  required: boolean;
  description: string;
}

const requiredEnvVars: EnvVar[] = [
  {
    name: 'DATABASE_URL',
    value: process.env.DATABASE_URL,
    required: true,
    description: 'URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL'
  },
  {
    name: 'JWT_SECRET',
    value: process.env.JWT_SECRET,
    required: true,
    description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤'
  },
  {
    name: 'JWT_EXPIRES_IN',
    value: process.env.JWT_EXPIRES_IN,
    required: true,
    description: '–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤'
  },
  {
    name: 'JWT_REFRESH_SECRET',
    value: process.env.JWT_REFRESH_SECRET,
    required: true,
    description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è refresh —Ç–æ–∫–µ–Ω–æ–≤'
  },
  {
    name: 'JWT_REFRESH_EXPIRES_IN',
    value: process.env.JWT_REFRESH_EXPIRES_IN,
    required: true,
    description: '–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ refresh —Ç–æ–∫–µ–Ω–æ–≤'
  },
  {
    name: 'PORT',
    value: process.env.PORT,
    required: true,
    description: '–ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  },
  {
    name: 'NODE_ENV',
    value: process.env.NODE_ENV,
    required: true,
    description: '–û–∫—Ä—É–∂–µ–Ω–∏–µ (development/production)'
  },
  {
    name: 'BCRYPT_ROUNDS',
    value: process.env.BCRYPT_ROUNDS,
    required: false,
    description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π'
  },
  {
    name: 'CORS_ORIGIN',
    value: process.env.CORS_ORIGIN,
    required: false,
    description: '–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–ª—è CORS'
  },
  {
    name: 'DB_POOL_SIZE',
    value: process.env.DB_POOL_SIZE,
    required: false,
    description: '–†–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö'
  },
  {
    name: 'DB_CONNECTION_TIMEOUT',
    value: process.env.DB_CONNECTION_TIMEOUT,
    required: false,
    description: '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
  },
  {
    name: 'LOG_LEVEL',
    value: process.env.LOG_LEVEL,
    required: false,
    description: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è'
  }
];

function checkEnvironmentVariables() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n');
  
  let hasErrors = false;
  
  requiredEnvVars.forEach(envVar => {
    const status = envVar.value ? '‚úÖ' : (envVar.required ? '‚ùå' : '‚ö†Ô∏è');
    const required = envVar.required ? '(–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)' : '(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)';
    
    console.log(`${status} ${envVar.name} ${required}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${envVar.description}`);
    
    if (envVar.value) {
      // –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (envVar.name.includes('SECRET') || envVar.name.includes('URL')) {
        const maskedValue = envVar.value.length > 20 
          ? envVar.value.substring(0, 10) + '...' + envVar.value.substring(envVar.value.length - 10)
          : '***';
        console.log(`   –ó–Ω–∞—á–µ–Ω–∏–µ: ${maskedValue}`);
      } else {
        console.log(`   –ó–Ω–∞—á–µ–Ω–∏–µ: ${envVar.value}`);
      }
    } else {
      if (envVar.required) {
        hasErrors = true;
        console.log(`   ‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢!`);
      } else {
        console.log(`   ‚ö†Ô∏è  –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)`);
      }
    }
    console.log('');
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π...\n');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ NODE_ENV
  if (process.env.NODE_ENV && !['development', 'production', 'test'].includes(process.env.NODE_ENV)) {
    console.log('‚ùå NODE_ENV –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å development, production –∏–ª–∏ test');
    hasErrors = true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ PORT
  if (process.env.PORT && isNaN(Number(process.env.PORT))) {
    console.log('‚ùå PORT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
    hasErrors = true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ BCRYPT_ROUNDS
  if (process.env.BCRYPT_ROUNDS && (isNaN(Number(process.env.BCRYPT_ROUNDS)) || Number(process.env.BCRYPT_ROUNDS) < 10)) {
    console.log('‚ùå BCRYPT_ROUNDS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º >= 10');
    hasErrors = true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ DATABASE_URL
  if (process.env.DATABASE_URL && !process.env.DATABASE_URL.startsWith('postgresql://')) {
    console.log('‚ùå DATABASE_URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å postgresql://');
    hasErrors = true;
  }
  
  console.log('='.repeat(50));
  
  if (hasErrors) {
    console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª RENDER_ENVIRONMENT_VARIABLES.md –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    process.exit(1);
  } else {
    console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
    console.log('üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É');
  }
}

checkEnvironmentVariables();
