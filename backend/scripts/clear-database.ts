/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function clearDatabase() {
  console.log('üóëÔ∏è –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•...');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const developer = await prisma.user.findUnique({
      where: { login: 'developer' }
    });

    if (!developer) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    console.log(`üë§ –ù–∞–π–¥–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: ${developer.login} (${developer.role})`);

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (—Ç–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑-–∑–∞ CASCADE)
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    await prisma.user.deleteMany({});

    // –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    console.log('üë§ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...');
    await prisma.user.create({
      data: {
        id: developer.id,
        login: developer.login,
        password: developer.password,
        role: developer.role,
      },
    });

    console.log('‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ü–û–õ–ù–û–°–¢–¨–Æ –û–ß–ò–©–ï–ù–ê!');
    console.log('üë§ –û—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫');
    console.log('üîë –õ–æ–≥–∏–Ω: developer');
    console.log('üîë –ü–∞—Ä–æ–ª—å: developer123');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
clearDatabase();

