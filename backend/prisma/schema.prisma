// Продакшн схема базы данных BetonApp
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Пользователи системы
model User {
  id          String   @id @default(cuid())
  login       String   @unique
  password    String
  fullName    String?  @map("full_name")
  role        String
  isActive    Boolean  @default(true) @map("is_active")
  lastLogin   DateTime? @map("last_login")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Связи
  createdOrders    Order[]    @relation("OrderCreator")
  assignedOrders   Order[]    @relation("OrderAssignee")
  createdRequests  InternalRequest[] @relation("RequestCreator")
  processedRequests InternalRequest[] @relation("RequestProcessor")
  sentMessages     Message[]  @relation("MessageSender")
  receivedMessages Message[]  @relation("MessageReceiver")
  auditLogs        AuditLog[]
  
  @@map("users")
  @@index([login])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
}

// Водители
model Driver {
  id          String   @id @default(cuid())
  phone       String   @unique
  fullName    String   @map("full_name")
  licenseNumber String? @map("license_number")
  status      String   @default("available") // available, busy, offline
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Связи
  orders           Order[]
  expenseInvoices  ExpenseInvoice[]
  receiptInvoices  ReceiptInvoice[]
  weighings        Weighing[]
  
  @@map("drivers")
  @@index([phone])
  @@index([status])
  @@index([isActive])
  @@index([status, isActive])
}

// Контрагенты
model Counterparty {
  id        String   @id @default(cuid())
  name      String
  type      String   // client, supplier
  contact   String?
  address   String?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Связи
  orders          Order[]
  expenseInvoices ExpenseInvoice[]
  receiptInvoices ReceiptInvoice[]
  prices          Price[]
  
  @@map("counterparties")
  @@index([type])
  @@index([isActive])
  @@index([name])
}

// Марки бетона
model ConcreteGrade {
  id                      String @id @default(cuid())
  name                    String
  grade                   String @unique
  cementConsumption       Int    @map("cement_consumption")
  gravelConsumption       Int    @map("gravel_consumption")
  sandConsumption         Int    @map("sand_consumption")
  plasticizerConsumption  Float  @map("plasticizer_consumption")
  description             String?
  isActive                Boolean @default(true) @map("is_active")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  // Связи
  orders Order[]
  prices Price[]
  
  @@map("concrete_grades")
  @@index([grade])
  @@index([isActive])
}

// Склады
model Warehouse {
  id        String   @id @default(cuid())
  name      String
  address   String?
  capacity  Float?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Связи
  materials       Material[]
  receiptInvoices ReceiptInvoice[]
  weighings       Weighing[]
  
  @@map("warehouses")
  @@index([isActive])
}

// Материалы
model Material {
  id          String    @id @default(cuid())
  name        String
  unit        String    // кг, т, м3, шт
  category    String?   // cement, gravel, sand, additive
  warehouseId String    @map("warehouse_id")
  quantity    Float     @default(0)
  minStock    Float?    @map("min_stock")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Связи
  warehouse       Warehouse @relation(fields: [warehouseId], references: [id])
  receiptInvoices ReceiptInvoiceItem[]
  weighings       Weighing[]
  prices          Price[]
  
  @@map("materials")
  @@index([warehouseId])
  @@index([category])
  @@index([isActive])
  @@index([quantity])
}

// Транспорт
model Vehicle {
  id           String   @id @default(cuid())
  plateNumber  String   @unique @map("plate_number")
  model        String
  capacity     Float?   // тонны
  type         String?  // truck, mixer, pump
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Связи
  orders          Order[]
  expenseInvoices ExpenseInvoice[]
  weighings       Weighing[]
  
  @@map("vehicles")
  @@index([plateNumber])
  @@index([type])
  @@index([isActive])
}

// Заказы
model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique @map("order_number")
  counterpartyId  String   @map("counterparty_id")
  concreteGradeId String   @map("concrete_grade_id")
  quantity        Float
  deliveryAddress String   @map("delivery_address")
  deliveryDate    DateTime @map("delivery_date")
  status          String   @default("pending") // pending, in_progress, completed, cancelled
  createdById     String   @map("created_by_id")
  assignedToId    String?  @map("assigned_to_id")
  driverId        String?  @map("driver_id")
  vehicleId       String?  @map("vehicle_id")
  notes           String?
  totalAmount     Float?   @map("total_amount")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Связи
  counterparty    Counterparty  @relation(fields: [counterpartyId], references: [id])
  concreteGrade   ConcreteGrade @relation(fields: [concreteGradeId], references: [id])
  createdBy       User          @relation("OrderCreator", fields: [createdById], references: [id])
  assignedTo      User?         @relation("OrderAssignee", fields: [assignedToId], references: [id])
  driver          Driver?       @relation(fields: [driverId], references: [id])
  vehicle         Vehicle?      @relation(fields: [vehicleId], references: [id])
  expenseInvoices ExpenseInvoice[]
  
  @@map("orders")
  @@index([orderNumber])
  @@index([status])
  @@index([deliveryDate])
  @@index([counterpartyId])
  @@index([createdById])
  @@index([driverId])
}

// Расходные накладные
model ExpenseInvoice {
  id           String   @id @default(cuid())
  invoiceNumber String  @unique @map("invoice_number")
  orderId      String   @map("order_id")
  driverId     String   @map("driver_id")
  vehicleId    String   @map("vehicle_id")
  counterpartyId String @map("counterparty_id")
  quantity     Float
  unitPrice    Float    @map("unit_price")
  totalAmount  Float    @map("total_amount")
  status       String   @default("draft") // draft, issued, delivered
  issuedAt     DateTime? @map("issued_at")
  deliveredAt  DateTime? @map("delivered_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Связи
  order        Order        @relation(fields: [orderId], references: [id])
  driver       Driver       @relation(fields: [driverId], references: [id])
  vehicle      Vehicle      @relation(fields: [vehicleId], references: [id])
  counterparty Counterparty @relation(fields: [counterpartyId], references: [id])
  
  @@map("expense_invoices")
  @@index([invoiceNumber])
  @@index([status])
  @@index([orderId])
  @@index([driverId])
  @@index([issuedAt])
}

// Приходные накладные
model ReceiptInvoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique @map("invoice_number")
  counterpartyId String  @map("counterparty_id")
  warehouseId   String   @map("warehouse_id")
  driverId      String?  @map("driver_id")
  totalAmount   Float    @map("total_amount")
  status        String   @default("draft") // draft, received, processed
  receivedAt    DateTime? @map("received_at")
  processedAt   DateTime? @map("processed_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Связи
  counterparty Counterparty         @relation(fields: [counterpartyId], references: [id])
  warehouse    Warehouse            @relation(fields: [warehouseId], references: [id])
  driver       Driver?              @relation(fields: [driverId], references: [id])
  items        ReceiptInvoiceItem[]
  
  @@map("receipt_invoices")
  @@index([invoiceNumber])
  @@index([status])
  @@index([counterpartyId])
  @@index([warehouseId])
  @@index([receivedAt])
}

// Позиции приходных накладных
model ReceiptInvoiceItem {
  id                String         @id @default(cuid())
  receiptInvoiceId  String         @map("receipt_invoice_id")
  materialId        String         @map("material_id")
  quantity          Float
  unitPrice         Float          @map("unit_price")
  totalPrice        Float          @map("total_price")
  createdAt         DateTime       @default(now()) @map("created_at")

  // Связи
  receiptInvoice ReceiptInvoice @relation(fields: [receiptInvoiceId], references: [id], onDelete: Cascade)
  material       Material       @relation(fields: [materialId], references: [id])
  
  @@map("receipt_invoice_items")
  @@index([receiptInvoiceId])
  @@index([materialId])
}

// Взвешивания
model Weighing {
  id          String   @id @default(cuid())
  driverId    String   @map("driver_id")
  vehicleId   String   @map("vehicle_id")
  materialId  String?  @map("material_id")
  warehouseId String   @map("warehouse_id")
  type        String   // arrival, departure
  grossWeight Float    @map("gross_weight")
  tareWeight  Float?   @map("tare_weight")
  netWeight   Float?   @map("net_weight")
  weighedAt   DateTime @map("weighed_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Связи
  driver    Driver     @relation(fields: [driverId], references: [id])
  vehicle   Vehicle    @relation(fields: [vehicleId], references: [id])
  material  Material?  @relation(fields: [materialId], references: [id])
  warehouse Warehouse  @relation(fields: [warehouseId], references: [id])
  
  @@map("weighings")
  @@index([driverId])
  @@index([vehicleId])
  @@index([type])
  @@index([weighedAt])
}

// Цены
model Price {
  id              String   @id @default(cuid())
  counterpartyId  String   @map("counterparty_id")
  concreteGradeId String?  @map("concrete_grade_id")
  materialId      String?  @map("material_id")
  price           Float
  currency        String   @default("KZT")
  validFrom       DateTime @map("valid_from")
  validTo         DateTime? @map("valid_to")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Связи
  counterparty  Counterparty   @relation(fields: [counterpartyId], references: [id])
  concreteGrade ConcreteGrade? @relation(fields: [concreteGradeId], references: [id])
  material      Material?      @relation(fields: [materialId], references: [id])
  
  @@map("prices")
  @@index([counterpartyId])
  @@index([validFrom])
  @@index([isActive])
}

// Внутренние заявки
model InternalRequest {
  id            String   @id @default(cuid())
  title         String
  description   String
  category      String   // office_supplies, equipment, maintenance, other
  priority      String   @default("medium") // low, medium, high, urgent
  status        String   @default("pending") // pending, approved, rejected, completed
  requestedById String   @map("requested_by_id")
  processedById String?  @map("processed_by_id")
  estimatedCost Float?   @map("estimated_cost")
  actualCost    Float?   @map("actual_cost")
  dueDate       DateTime? @map("due_date")
  completedAt   DateTime? @map("completed_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Связи
  requestedBy User  @relation("RequestCreator", fields: [requestedById], references: [id])
  processedBy User? @relation("RequestProcessor", fields: [processedById], references: [id])
  
  @@map("internal_requests")
  @@index([status])
  @@index([category])
  @@index([priority])
  @@index([requestedById])
  @@index([createdAt])
}

// Сообщения
model Message {
  id           String   @id @default(cuid())
  senderId     String   @map("sender_id")
  receiverId   String?  @map("receiver_id")
  chatId       String?  @map("chat_id")
  content      String
  messageType  String   @default("text") @map("message_type") // text, image, file
  isRead       Boolean  @default(false) @map("is_read")
  replyToId    String?  @map("reply_to_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Связи
  sender   User     @relation("MessageSender", fields: [senderId], references: [id])
  receiver User?    @relation("MessageReceiver", fields: [receiverId], references: [id])
  replyTo  Message? @relation("MessageReply", fields: [replyToId], references: [id])
  replies  Message[] @relation("MessageReply")
  
  @@map("messages")
  @@index([senderId])
  @@index([receiverId])
  @@index([chatId])
  @@index([createdAt])
  @@index([isRead])
}

// Аудит действий
model AuditLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  action    String   // create, update, delete, login, logout
  entity    String   // user, order, invoice, etc.
  entityId  String?  @map("entity_id")
  oldData   Json?    @map("old_data")
  newData   Json?    @map("new_data")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  // Связи
  user User @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([entity])
  @@index([createdAt])
}

// Настройки системы
model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string") // string, number, boolean, json
  category  String?  // general, security, notifications, etc.
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("system_settings")
  @@index([key])
  @@index([category])
}
